/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  Handles game-specific networking management (cheat detection, bandwidth management, etc.).
**/
@:glueCppIncludes("GameFramework/GameNetworkManager.h", "Engine.h")
@:uextern extern class AGameNetworkManager extends unreal.AInfo {
  
  /**
    If true, actor network relevancy is constrained by whether they are within their NetCullDistanceSquared from the client's view point.
  **/
  public var bUseDistanceBasedRelevancy : Bool;
  
  /**
    If client update is within MAXPOSITIONERRORSQUARED then he is authorative on his final position
  **/
  public var ClientAuthorativePosition : Bool;
  
  /**
    MAXCLIENTUPDATEINTERVAL is the maximum time between movement updates from the client before the server forces an update.
  **/
  public var MAXCLIENTUPDATEINTERVAL : unreal.Float32;
  
  /**
    CLIENTADJUSTUPDATECOST is the bandwidth cost in bytes of sending a client adjustment update. 180 is greater than the actual cost, but represents a tweaked value reserving enough bandwidth for
          other updates sent to the client.  Increase this value to reduce client adjustment update frequency, or if the amount of data sent in the clientadjustment() call increases
  **/
  public var CLIENTADJUSTUPDATECOST : unreal.Float32;
  
  /**
    MAXNEARZEROVELOCITYSQUARED is the square of the max velocity that is considered zero (not corrected) in net play
  **/
  public var MAXNEARZEROVELOCITYSQUARED : unreal.Float32;
  
  /**
    MAXPOSITIONERRORSQUARED is the square of the max position error that is accepted (not corrected) in net play
  **/
  public var MAXPOSITIONERRORSQUARED : unreal.Float32;
  
  /**
    Average size of replicated move packet (ServerMove() packet size) from player
  **/
  public var MoveRepSize : unreal.Float32;
  
  /**
    The amount of time to wait before checking a connection for standby issues
  **/
  public var JoinInProgressStandbyWaitTime : unreal.Float32;
  
  /**
    The percentage of clients with bad ping before triggering the standby code
  **/
  public var PercentForBadPing : unreal.Float32;
  
  /**
    The percentage of clients missing TX data before triggering the standby code
  **/
  public var PercentMissingForTxStandby : unreal.Float32;
  
  /**
    The percentage of clients missing RX data before triggering the standby code
  **/
  public var PercentMissingForRxStandby : unreal.Float32;
  
  /**
    The point we determine the server is either delaying packets or has bad upstream
  **/
  public var BadPingThreshold : unreal.Int32;
  
  /**
    The amount of time without packets before triggering the cheat code
  **/
  public var StandbyTxCheatTime : unreal.Float32;
  
  /**
    The amount of time without packets before triggering the cheat code
  **/
  public var StandbyRxCheatTime : unreal.Float32;
  
  /**
    Used to determine whether we've already caught a cheat or not
  **/
  public var bHasStandbyCheatTriggered : Bool;
  
  /**
    Used to determine if checking for standby cheats should occur
  **/
  public var bIsStandbyCheckingEnabled : Bool;
  
  /**
    Maximum bandwidth dynamically set per connection
  **/
  public var MaxDynamicBandwidth : unreal.Int32;
  
  /**
    Minimum bandwidth dynamically set per connection
  **/
  public var MinDynamicBandwidth : unreal.Int32;
  
  /**
    Total available bandwidth for listen server, split dynamically across net connections
  **/
  public var TotalNetBandwidth : unreal.Int32;
  
  /**
    Last time netspeed was updated for server (by client entering or leaving)
  **/
  public var LastNetSpeedUpdateTime : unreal.Float32;
  
  /**
    Current adjusted net speed - Used for dynamically managing netspeed for listen servers
  **/
  public var AdjustedNetSpeed : unreal.Int32;
  
}
