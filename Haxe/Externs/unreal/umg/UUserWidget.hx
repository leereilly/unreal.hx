/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal.umg;


/**
  The user widget is extensible by users through the WidgetBlueprint.
**/
@:umodule("UMG")
@:glueCppIncludes("Blueprint/UserWidget.h")
@:uextern extern class UUserWidget extends unreal.umg.UWidget implements unreal.umg.INamedSlotInterface {
  #if WITH_EDITORONLY_DATA
  
  /**
    A preview background that you can use when designing the UI to get a sense of scale on the screen.  Use
    a texture with a screenshot of your game in it, for example if you were designing a HUD.
  **/
  public var PreviewBackground : unreal.UTexture2D;
  public var DesignSizeMode : unreal.umg.EDesignPreviewSizeMode;
  
  /**
    A flag that determines if the widget's desired size is used for previewing the widget in the designer.
  **/
  public var bUseDesiredSizeAtDesignTime_DEPRECATED : Bool;
  
  /**
    A flag that determines if the design time size is used for previewing the widget in the designer.
  **/
  public var bUseDesignTimeSize_DEPRECATED : Bool;
  
  /**
    Stores the design time desired size of the user widget
  **/
  public var DesignTimeSize : unreal.FVector2D;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Stores the widgets being assigned to named slots
  **/
  public var NamedSlotBindings : unreal.TArray<unreal.umg.FNamedSlotBinding>;
  
  /**
    List of sequence players to cache and clean up when safe
  **/
  public var StoppedSequencePlayers : unreal.TArray<unreal.umg.UUMGSequencePlayer>;
  
  /**
    All the sequence players currently playing
  **/
  public var ActiveSequencePlayers : unreal.TArray<unreal.umg.UUMGSequencePlayer>;
  
  /**
    The widget tree contained inside this user widget initialized by the blueprint
  **/
  public var WidgetTree : unreal.umg.UWidgetTree;
  
  /**
    Setting this flag to true, allows this widget to accept focus when clicked, or when navigated to.
  **/
  public var bSupportsKeyboardFocus : Bool;
  
  /**
    The foreground color of the widget, this is inherited by sub widgets.  Any color property
    that is marked as inherit will use this color.
  **/
  public var ForegroundColor : unreal.slatecore.FSlateColor;
  
  /**
    The color and opacity of this widget.  Tints all child widgets.
  **/
  public var ColorAndOpacity : unreal.FLinearColor;
  
}
