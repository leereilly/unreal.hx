/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.umg;


/**
  The user widget is extensible by users through the WidgetBlueprint.
**/
@:umodule("UMG")
@:glueCppIncludes("Blueprint/UserWidget.h")
@:uextern extern class UUserWidget extends unreal.umg.UWidget implements unreal.umg.INamedSlotInterface {
  
  /**
    Adds it to the game's viewport and fills the entire screen, unless SetDesiredSizeInViewport is called
    to explicitly set the size.
    
    @param ZOrder The higher the number, the more on top this widget will be.
  **/
  @:final public function AddToViewport(ZOrder : unreal.Int32) : Void;
  
  /**
    Adds the widget to the game's viewport in a section dedicated to the player.  This is valuable in a split screen
    game where you need to only show a widget over a player's portion of the viewport.
    
    @param ZOrder The higher the number, the more on top this widget will be.
  **/
  @:final public function AddToPlayerScreen(ZOrder : unreal.Int32) : Bool;
  
  /**
    Removes the widget from the viewport.
  **/
  @:final public function RemoveFromViewport() : Void;
  
  /**
    Sets the widgets position in the viewport.
    @param Position The 2D position to set the widget to in the viewport.
    @param bRemoveDPIScale If you've already calculated inverse DPI, set this to false.
    Otherwise inverse DPI is applied to the position so that when the location is scaled
    by DPI, it ends up in the expected position.
  **/
  @:final public function SetPositionInViewport(Position : unreal.FVector2D, bRemoveDPIScale : Bool) : Void;
  @:final public function SetDesiredSizeInViewport(Size : unreal.FVector2D) : Void;
  @:final public function SetAlignmentInViewport(Alignment : unreal.FVector2D) : Void;
  @:thisConst @:final public function GetIsVisible() : Bool;
  
  /**
    @return true if the widget was added to the viewport using AddToViewport.
  **/
  @:thisConst @:final public function IsInViewport() : Bool;
  
  /**
    Gets the local player associated with this UI.
    @return The owning local player.
  **/
  @:thisConst @:final public function GetOwningLocalPlayer() : unreal.ULocalPlayer;
  
  /**
    Sets the local player associated with this UI.
    @param LocalPlayer The local player you want to be the conceptual owner of this UI.
  **/
  @:final public function SetOwningLocalPlayer(LocalPlayer : unreal.ULocalPlayer) : Void;
  
  /**
    Gets the player controller associated with this UI.
    @return The player controller that owns the UI.
  **/
  @:thisConst @:final public function GetOwningPlayer() : unreal.APlayerController;
  
  /**
    Gets the player pawn associated with this UI.
    @return Gets the owning player pawn that's owned by the player controller assigned to this widget.
  **/
  @:thisConst @:final public function GetOwningPlayerPawn() : unreal.APawn;
  
  /**
    Called after the underlying slate widget is constructed.  Depending on how the slate object is used
    this event may be called multiple times due to adding and removing from the hierarchy.
  **/
  public function Construct() : Void;
  
  /**
    Called when a widget is no longer referenced causing the slate resource to destroyed.  Just like
    Construct this event can be called multiple times.
  **/
  public function Destruct() : Void;
  
  /**
    Ticks this widget.  Override in derived classes, but always call the parent implementation.
    
    @param  MyGeometry The space allotted for this widget
    @param  InDeltaTime  Real time passed since last tick
  **/
  public function Tick(MyGeometry : unreal.slatecore.FGeometry, InDeltaTime : unreal.Float32) : Void;
  @:thisConst public function OnPaint(Context : unreal.PRef<unreal.umg.FPaintContext>) : Void;
  
  /**
    Gets a value indicating if the widget is interactive.
  **/
  @:thisConst public function IsInteractable() : Bool;
  
  /**
    Called when an animation is started.
    
    @param Animation the animation that started
  **/
  public function OnAnimationStarted(Animation : unreal.Const<unreal.umg.UWidgetAnimation>) : Void;
  
  /**
    Called when an animation has either played all the way through or is stopped
    
    @param Animation The animation that has finished playing
  **/
  public function OnAnimationFinished(Animation : unreal.Const<unreal.umg.UWidgetAnimation>) : Void;
  
  /**
    Sets the tint of the widget, this affects all child widgets.
    
    @param InColorAndOpacity     The tint to apply to all child widgets.
  **/
  @:final public function SetColorAndOpacity(InColorAndOpacity : unreal.FLinearColor) : Void;
  
  /**
    Sets the foreground color of the widget, this is inherited by sub widgets.  Any color property
    that is marked as inherit will use this color.
    
    @param InForegroundColor     The foreground color.
  **/
  @:final public function SetForegroundColor(InForegroundColor : unreal.slatecore.FSlateColor) : Void;
  
  /**
    Plays an animation in this widget a specified number of times
    
    @param InAnimation The animation to play
    @param StartAtTime The time in the animation from which to start playing. For looped animations, this will only affect the first playback of the animation.
    @param NumLoopsToPlay The number of times to loop this animation (0 to loop indefinitely)
    @param PlayMode Specifies the playback mode
  **/
  @:final public function PlayAnimation(InAnimation : unreal.Const<unreal.umg.UWidgetAnimation>, StartAtTime : unreal.Float32, NumLoopsToPlay : unreal.Int32, PlayMode : unreal.umg.EUMGSequencePlayMode) : Void;
  
  /**
    Stops an already running animation in this widget
    
    @param The name of the animation to stop
  **/
  @:final public function StopAnimation(InAnimation : unreal.Const<unreal.umg.UWidgetAnimation>) : Void;
  
  /**
    Pauses an already running animation in this widget
    
    @param The name of the animation to pause
    @return the time point the animation was at when it was paused.  Use this as the StartAtTime when you trigger PlayAnimation.
  **/
  @:final public function PauseAnimation(InAnimation : unreal.Const<unreal.umg.UWidgetAnimation>) : unreal.Float32;
  
  /**
    Plays a sound through the UI
    
    @param The sound to play
  **/
  @:final public function PlaySound(SoundToPlay : unreal.USoundBase) : Void;
  #if WITH_EDITORONLY_DATA
  
  /**
    A preview background that you can use when designing the UI to get a sense of scale on the screen.  Use
    a texture with a screenshot of your game in it, for example if you were designing a HUD.
  **/
  public var PreviewBackground : unreal.UTexture2D;
  public var DesignSizeMode : unreal.umg.EDesignPreviewSizeMode;
  
  /**
    A flag that determines if the widget's desired size is used for previewing the widget in the designer.
  **/
  public var bUseDesiredSizeAtDesignTime_DEPRECATED : Bool;
  
  /**
    A flag that determines if the design time size is used for previewing the widget in the designer.
  **/
  public var bUseDesignTimeSize_DEPRECATED : Bool;
  
  /**
    Stores the design time desired size of the user widget
  **/
  public var DesignTimeSize : unreal.FVector2D;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Stores the widgets being assigned to named slots
  **/
  public var NamedSlotBindings : unreal.TArray<unreal.umg.FNamedSlotBinding>;
  
  /**
    List of sequence players to cache and clean up when safe
  **/
  public var StoppedSequencePlayers : unreal.TArray<unreal.umg.UUMGSequencePlayer>;
  
  /**
    All the sequence players currently playing
  **/
  public var ActiveSequencePlayers : unreal.TArray<unreal.umg.UUMGSequencePlayer>;
  
  /**
    The widget tree contained inside this user widget initialized by the blueprint
  **/
  public var WidgetTree : unreal.umg.UWidgetTree;
  
  /**
    Setting this flag to true, allows this widget to accept focus when clicked, or when navigated to.
  **/
  public var bSupportsKeyboardFocus : Bool;
  
  /**
    The foreground color of the widget, this is inherited by sub widgets.  Any color property
    that is marked as inherit will use this color.
  **/
  public var ForegroundColor : unreal.slatecore.FSlateColor;
  
  /**
    The color and opacity of this widget.  Tints all child widgets.
  **/
  public var ColorAndOpacity : unreal.FLinearColor;
  // NamedSlotInterface interface implementation
  
}
