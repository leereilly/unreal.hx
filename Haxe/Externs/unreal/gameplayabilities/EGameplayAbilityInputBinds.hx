/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal.gameplayabilities;


/**
  This is an example input binding enum for GameplayAbilities. Your project may want to create its own.
  The MetaData default bind keys (LMB, RMB, Q, E, etc) are a convenience for designers setting up abilities sets
  or whatever other data you have that gives an ability with a default key binding. Actual key binding is up to DefaultInput.ini
  
  E.g., "Ability1" is the command string that is bound to AbilitySystemComponent::ActivateAbility(1). The Meta data only *suggests*
  that you are binding "Ability1" to LMB by default in your projects DefaultInput.ini.
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("GameplayAbilitySet.h")
@:uname("EGameplayAbilityInputBinds.Type")
@:uextern extern enum EGameplayAbilityInputBinds {
  
  /**
    Ability1 (LMB)
  **/
  @DisplayName("Ability1 (LMB)")
  Ability1;
  
  /**
    Ability2 (RMB)
  **/
  @DisplayName("Ability2 (RMB)")
  Ability2;
  
  /**
    Ability3 (Q)
  **/
  @DisplayName("Ability3 (Q)")
  Ability3;
  
  /**
    Ability4 (E)
  **/
  @DisplayName("Ability4 (E)")
  Ability4;
  
  /**
    Ability5 (R)
  **/
  @DisplayName("Ability5 (R)")
  Ability5;
  
  /**
    Ability6 (Shift)
  **/
  @DisplayName("Ability6 (Shift)")
  Ability6;
  
  /**
    Ability7 (Space)
  **/
  @DisplayName("Ability7 (Space)")
  Ability7;
  
  /**
    Ability8 (B)
  **/
  @DisplayName("Ability8 (B)")
  Ability8;
  
  /**
    Ability9 (T)
  **/
  @DisplayName("Ability9 (T)")
  Ability9;
  
}
