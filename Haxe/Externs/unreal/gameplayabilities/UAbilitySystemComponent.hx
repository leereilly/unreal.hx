/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal.gameplayabilities;


/**
  The core ActorComponent for interfacing with the GameplayAbilities System
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("AbilitySystemComponent.h")
@:uextern extern class UAbilitySystemComponent extends unreal.gameplaytasks.UGameplayTasksComponent implements unreal.gameplaytags.IGameplayTagAssetInterface {
  
  /**
    Tracks abilities that are blocked based on input binding. An ability is blocked if BlockedAbilityBindings[InputID] > 0
  **/
  private var BlockedAbilityBindings : unreal.TArray<unreal.UInt8>;
  private var ActiveGameplayCues : unreal.gameplayabilities.FActiveGameplayCueContainer;
  
  /**
    Contains all of the gameplay effects that are currently active on this component
  **/
  private var ActiveGameplayEffects : unreal.gameplayabilities.FActiveGameplayEffectsContainer;
  
  /**
    The actor that is the physical representation used for abilities. Can be NULL
  **/
  public var AvatarActor : unreal.AActor;
  
  /**
    The actor that owns this component logically
  **/
  public var OwnerActor : unreal.AActor;
  
  /**
    Data structure for montages that were instigated locally (everything if server, predictive if client. replicated if simulated proxy)
  **/
  private var LocalAnimMontageInfo : unreal.gameplayabilities.FGameplayAbilityLocalAnimMontage;
  
  /**
    Data structure for replicating montage info to simulated clients
  **/
  private var RepAnimMontageInfo : unreal.gameplayabilities.FGameplayAbilityRepAnimMontage;
  public var SpawnedTargetActors : unreal.TArray<unreal.gameplayabilities.AGameplayAbilityTargetActor>;
  
  /**
    Full list of all instance-per-execution gameplay abilities associated with this component
  **/
  private var AllReplicatedInstancedAbilities : unreal.TArray<unreal.gameplayabilities.UGameplayAbility>;
  
  /**
    The abilities we can activate.
            -This will include CDOs for non instanced abilities and per-execution instanced abilities.
            -Actor-instanced abilities will be the actual instance (not CDO)
    
    This array is not vital for things to work. It is a convenience thing for 'giving abilities to the actor'. But abilities could also work on things
    without an AbilitySystemComponent. For example an ability could be written to execute on a StaticMeshActor. As long as the ability doesn't require
    instancing or anything else that the AbilitySystemComponent would provide, then it doesn't need the component to function.
  **/
  private var ActivatableAbilities : unreal.gameplayabilities.FGameplayAbilitySpecContainer;
  public var IncomingDuration : unreal.Float32;
  
  /**
    System Attributes
  **/
  public var OutgoingDuration : unreal.Float32;
  
  /**
    PredictionKeys, see more info in GameplayPrediction.h
  **/
  public var ReplicatedPredictionKey : unreal.gameplayabilities.FPredictionKey;
  public var SpawnedAttributes : unreal.TArray<unreal.gameplayabilities.UAttributeSet>;
  public var DefaultStartingData : unreal.TArray<unreal.gameplayabilities.FAttributeDefaults>;
  
}
