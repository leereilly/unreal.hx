/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal.gameplayabilities;


/**
  A self contained handler of a GameplayCue. These are similiar to AnimNotifies in implementation.
  Instanced GameplayCueNotify which runs arbitrary blueprint code. (TODO: This should be the NON-instanced version!)
  
  
  TODO/Fixme:
          -Unsure: Leave K2_HandleGameplayCue in as generic function?
          -OnExecute/Active/Remove are more clear, easy to use. Make it harder to share info between events.
**/
@:umodule("GameplayAbilities")
@:glueCppIncludes("GameplayCueNotify_Actor.h")
@:uextern extern class AGameplayCueNotify_Actor extends unreal.AActor {
  
  /**
    Does this cue get a new instance for each source object? For example if two source objects apply a GC to the same source, do we create two of these GameplayCue Notify actors or just one?
    If the notify is simply playing FX or sounds on the source, it should not need unique instances. If this Notify is attaching a beam from the source object to the target, it does need a unique instance per instigator.
  **/
  public var bUniqueInstancePerSourceObject : Bool;
  
  /**
    Does this cue get a new instance for each instigator? For example if two instigators apply a GC to the same source, do we create two of these GameplayCue Notify actors or just one?
    If the notify is simply playing FX or sounds on the source, it should not need unique instances. If this Notify is attaching a beam from the instigator to the target, it does need a unique instance per instigator.
  **/
  public var bUniqueInstancePerInstigator : Bool;
  
  /**
    Does this Cue override other cues, or is it called in addition to them? E.g., If this is Damage.Physical.Slash, we wont call Damage.Physical afer we run this cue.
  **/
  public var IsOverride : Bool;
  
  /**
    If bAutoDestroyOnRemove is true, the actor will stay alive for this many seconds before being auto destroyed.
  **/
  public var AutoDestroyDelay : unreal.Float32;
  
  /**
    We will auto destroy this GameplayCueActor when the OnRemove event fires (after OnRemove is called).
  **/
  public var bAutoDestroyOnRemove : Bool;
  
  /**
    Mirrors GameplayCueTag in order to be asset registry searchable
  **/
  public var GameplayCueName : unreal.FName;
  public var GameplayCueTag : unreal.gameplaytags.FGameplayTag;
  
}
