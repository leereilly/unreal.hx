/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  The settings for attenuating.
**/
@:glueCppIncludes("Sound/SoundAttenuation.h", "Engine.h")
@:uextern extern class FAttenuationSettings {
  @:uname('new') public static function create():PHaxeCreated<unreal.FAttenuationSettings>;
  
  /**
    The range at which to apply the maximum amount of low pass filter.
  **/
  public var LPFRadiusMax : unreal.Float32;
  
  /**
    The range at which to start applying a low pass filter.
  **/
  public var LPFRadiusMin : unreal.Float32;
  
  /**
    The distance over which falloff occurs.
  **/
  public var FalloffDistance : unreal.Float32;
  
  /**
    The distance back from the sound's origin to begin the cone when using the cone attenuation shape.
  **/
  public var ConeOffset : unreal.Float32;
  
  /**
    The dimensions to use for the attenuation shape. Interpretation of the values differ per shape.
             Sphere  - X is Sphere Radius. Y and Z are unused
             Capsule - X is Capsule Half Height, Y is Capsule Radius, Z is unused
             Box     - X, Y, and Z are the Box's dimensions
             Cone    - X is Cone Radius, Y is Cone Angle, Z is Cone Falloff Angle
  **/
  public var AttenuationShapeExtents : unreal.FVector;
  public var RadiusMax_DEPRECATED : unreal.Float32;
  public var RadiusMin_DEPRECATED : unreal.Float32;
  
  /**
    Which spatialization algorithm to use if spatializing mono sources.
  **/
  public var SpatializationAlgorithm : unreal.ESoundSpatializationAlgorithm;
  
  /**
    At what distance we start treating the sound source as spatialized
  **/
  public var OmniRadius : unreal.Float32;
  
  /**
    The volume at maximum distance in deciBels.
  **/
  public var dBAttenuationAtMax : unreal.Float32;
  
  /**
    The shape of the attenuation volume.
  **/
  public var AttenuationShape : unreal.EAttenuationShape;
  public var DistanceType_DEPRECATED : unreal.ESoundDistanceCalc;
  public var CustomAttenuationCurve : unreal.FRuntimeFloatCurve;
  
  /**
    The type of volume versus distance algorithm to use for the attenuation model.
  **/
  public var DistanceAlgorithm : unreal.ESoundDistanceModel;
  
  /**
    Enable attenuation via low pass filter.
  **/
  public var bAttenuateWithLPF : Bool;
  
  /**
    Enable the source to be positioned in 3D.
  **/
  public var bSpatialize : Bool;
  
  /**
    Enable attenuation via volume.
  **/
  public var bAttenuate : Bool;
  
}
