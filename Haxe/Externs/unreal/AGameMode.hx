/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  The GameMode defines the game being played. It governs the game rules, scoring, what actors
  are allowed to exist in this game type, and who may enter the game.
  
  It is only instanced on the server and will never exist on the client.
  
  A GameMode actor is instantiated when the level is initialized for gameplay in
  C++ UGameEngine::LoadMap().
  
  The class of this GameMode actor is determined by (in order) either the URL ?game=xxx,
  the GameMode Override value set in the World Settings, or the DefaultGameMode entry set
  in the game's Project Settings.
  
  @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/GameMode/index.html
**/
@:glueCppIncludes("GameFramework/GameMode.h", "Engine.h")
@:uextern extern class AGameMode extends unreal.AInfo {
  
  /**
    Time a playerstate will stick around in an inactive state after a player logout
  **/
  private var InactivePlayerStateLifeSpan : unreal.Float32;
  
  /**
    Handy alternate short names for GameMode classes (e.g. "DM" could be an alias for "MyProject.MyGameModeMP_DM".
  **/
  private var GameModeClassAliases : unreal.TArray<unreal.FGameClassShortName>;
  
  /**
    PlayerStates of players who have disconnected from the server (saved in case they reconnect)
  **/
  public var InactivePlayerArray : unreal.TArray<unreal.APlayerState>;
  
  /**
    GameState is used to replicate game state relevant properties to all clients.
  **/
  public var GameState : unreal.AGameState;
  
  /**
    Class of GameState associated with this GameMode.
  **/
  public var GameStateClass : unreal.TSubclassOf<unreal.AGameState>;
  
  /**
    A PlayerState of this class will be associated with every player to replicate relevant player information to all clients.
  **/
  public var PlayerStateClass : unreal.TSubclassOf<unreal.APlayerState>;
  
  /**
    The PlayerController class used when spectating a network replay.
  **/
  public var ReplaySpectatorPlayerControllerClass : unreal.TSubclassOf<unreal.APlayerController>;
  
  /**
    The pawn class used by the PlayerController for players when spectating.
  **/
  public var SpectatorClass : unreal.TSubclassOf<unreal.ASpectatorPawn>;
  
  /**
    The class of PlayerController to spawn for players logging in.
  **/
  public var PlayerControllerClass : unreal.TSubclassOf<unreal.APlayerController>;
  
  /**
    Contains strings describing localized game agnostic messages.
  **/
  public var EngineMessageClass : unreal.TSubclassOf<unreal.ULocalMessage>;
  
  /**
    Number of players that are still traveling from a previous map
  **/
  public var NumTravellingPlayers : unreal.Int32;
  
  /**
    Game Session handles login approval, arbitration, online game interface
  **/
  public var GameSession : unreal.AGameSession;
  
  /**
    Minimum time before player can respawn after dying.
  **/
  public var MinRespawnDelay : unreal.Float32;
  
  /**
    number of non-human players (AI controlled but participating as a player).
  **/
  public var NumBots : unreal.Int32;
  
  /**
    Current number of human players.
  **/
  public var NumPlayers : unreal.Int32;
  
  /**
    Current number of spectators.
  **/
  public var NumSpectators : unreal.Int32;
  
  /**
    HUD class this game uses.
  **/
  public var HUDClass : unreal.TSubclassOf<unreal.AHUD>;
  
  /**
    The default pawn class used by players.
  **/
  public var DefaultPawnClass : unreal.TSubclassOf<unreal.APawn>;
  
  /**
    Save options string and parse it when needed
  **/
  public var OptionsString : unreal.FString;
  
  /**
    Whether the game should immediately start when the first player logs in. Affects the default behavior of ReadyToStartMatch
  **/
  public var bDelayedStart : Bool;
  
  /**
    Whether players should immediately spawn when logging in, or stay as spectators until they manually spawn
  **/
  public var bStartPlayersAsSpectators : Bool;
  
  /**
    Whether the game is pauseable.
  **/
  public var bPauseable : Bool;
  
  /**
    perform map travels using SeamlessTravel() which loads in the background and doesn't disconnect clients
    @see World::SeamlessTravel()
  **/
  public var bUseSeamlessTravel : Bool;
  
}
