/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal.editorstyle;


/**
  Implements the Editor style settings.
**/
@:umodule("EditorStyle")
@:glueCppIncludes("Classes/EditorStyleSettings.h", "Engine.h")
@:uextern extern class UEditorStyleSettings extends unreal.UObject {
  
  /**
    If checked, new asset editor tabs will open in a new window instead of docked in the tab from which they were opened
  **/
  public var bOpenAssetEditorTabsInNewWindow : Bool;
  
  /**
    The display mode for timestamps in the output log
  **/
  public var LogTimestampMode : unreal.ELogTimes;
  
  /**
    When enabled, the Launch menu items will be shown.
  **/
  public var bShowLaunchMenus : Bool;
  
  /**
    When enabled, the Editor Preferences and Project Settings menu items in the main menu will be expanded with sub-menus for each settings section.
  **/
  public var bShowProjectMenus : Bool;
  
  /**
    When enabled, the Editor Preferences and Project Settings menu items in the main menu will be expanded with sub-menus for each settings section.
  **/
  public var bExpandConfigurationMenus : Bool;
  
  /**
    When enabled, the C++ names for properties and functions will be displayed in a format that is easier to read
  **/
  public var bShowFriendlyNames : Bool;
  
  /**
    Enables animated transitions for certain menus and pop-up windows.  Note that animations may be automatically disabled at low frame rates in order to improve responsiveness.
  **/
  public var bEnableWindowAnimations : Bool;
  
  /**
    Whether to use small toolbar icons without labels or not.
  **/
  public var bUseSmallToolBarIcons : Bool;
  
  /**
    Applies a color vision deficiency filter to the entire editor
  **/
  public var ColorVisionDeficiencyPreviewType : unreal.editorstyle.EColorVisionDeficiency;
  
  /**
    The color used to represent keyboard input selection focus
  **/
  public var KeyboardFocusColor : unreal.FLinearColor;
  
  /**
    The color used to represent selected items that are currently inactive
  **/
  public var InactiveSelectionColor : unreal.FLinearColor;
  
  /**
    The color used to represent a pressed item
  **/
  public var PressedSelectionColor : unreal.FLinearColor;
  
  /**
    The color used to represent selection
  **/
  public var SelectionColor : unreal.FLinearColor;
  
}
