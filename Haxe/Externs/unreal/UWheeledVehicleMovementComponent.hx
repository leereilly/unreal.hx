/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  Component to handle the vehicle simulation for an actor.
**/
@:glueCppIncludes("Vehicles/WheeledVehicleMovementComponent.h")
@:uextern extern class UWheeledVehicleMovementComponent extends unreal.UPawnMovementComponent implements unreal.IRVOAvoidanceInterface {
  
  /**
    Rate at which input steering can rise and fall
  **/
  private var SteeringInputRate : unreal.FVehicleInputRate;
  
  /**
    Rate at which input handbrake can rise and fall
  **/
  private var HandbrakeInputRate : unreal.FVehicleInputRate;
  
  /**
    Rate at which input brake can rise and fall
  **/
  private var BrakeInputRate : unreal.FVehicleInputRate;
  
  /**
    Rate at which input throttle can rise and fall
  **/
  private var ThrottleInputRate : unreal.FVehicleInputRate;
  
  /**
    Auto-brake when vehicle forward speed is opposite of player input by at least this much (cm/s)
  **/
  private var WrongDirectionThreshold : unreal.Float32;
  
  /**
    Auto-brake when absolute vehicle forward speed is less than this (cm/s)
  **/
  private var StopThreshold : unreal.Float32;
  
  /**
    How much to press the brake when the player has release throttle
  **/
  private var IdleBrakeInput : unreal.Float32;
  
  /**
    Handbrake output to physics system. Range 0...1
  **/
  private var HandbrakeInput : unreal.Float32;
  
  /**
    Brake output to physics system. Range 0...1
  **/
  private var BrakeInput : unreal.Float32;
  
  /**
    Accelerator output to physics system. Range 0...1
  **/
  private var ThrottleInput : unreal.Float32;
  
  /**
    Steering output to physics system. Range -1...1
  **/
  private var SteeringInput : unreal.Float32;
  
  /**
    What the player has the accelerator set to. Range -1...1
  **/
  private var RawThrottleInput : unreal.Float32;
  
  /**
    What the player has the steering set to. Range -1...1
  **/
  private var RawSteeringInput : unreal.Float32;
  
  /**
    replicated state of vehicle
  **/
  private var ReplicatedState : unreal.FReplicatedVehicleState;
  
  /**
    Temporarily holds launch velocity when pawn is to be launched so it happens at end of movement.
  **/
  public var PendingLaunchVelocity : unreal.FVector;
  
  /**
    De facto default value 0.5 (due to that being the default in the avoidance registration function), indicates RVO behavior.
  **/
  public var AvoidanceWeight : unreal.Float32;
  
  /**
    Will NOT avoid other agents if they are in one of specified groups, higher priority than GroupsToAvoid
  **/
  public var GroupsToIgnore : unreal.FNavAvoidanceMask;
  
  /**
    Will avoid other agents if they are in one of specified groups
  **/
  public var GroupsToAvoid : unreal.FNavAvoidanceMask;
  
  /**
    Moving actor's group mask
  **/
  public var AvoidanceGroup : unreal.FNavAvoidanceMask;
  
  /**
    No default value, for now it's assumed to be valid if GetAvoidanceManager() returns non-NULL.
  **/
  public var AvoidanceUID : unreal.Int32;
  
  /**
    Value by which to alter throttle per frame based on calculated avoidance
  **/
  public var RVOThrottleStep : unreal.Float32;
  
  /**
    Value by which to alter steering per frame based on calculated avoidance
  **/
  public var RVOSteeringStep : unreal.Float32;
  
  /**
    Area Radius to consider for RVO avoidance
  **/
  public var AvoidanceConsiderationRadius : unreal.Float32;
  
  /**
    Vehicle Height to use for RVO avoidance (usually vehicle height)
  **/
  public var RVOAvoidanceHeight : unreal.Float32;
  
  /**
    Vehicle Radius to use for RVO avoidance (usually half of vehicle width)
  **/
  public var RVOAvoidanceRadius : unreal.Float32;
  
  /**
    If set, component will use RVO avoidance
  **/
  public var bUseRVOAvoidance : Bool;
  
  /**
    Our instanced wheels
  **/
  public var Wheels : unreal.TArray<unreal.UVehicleWheel>;
  
  /**
    The sub-step count above the threshold longitudinal speed has a default of 1.
  **/
  public var HighForwardSpeedSubStepCount : unreal.Int32;
  
  /**
    The sub-step count below the threshold longitudinal speed has a default of 3.
  **/
  public var LowForwardSpeedSubStepCount : unreal.Int32;
  
  /**
    PhysX sub-steps
        More sub-steps provides better stability but with greater computational cost.
        Typically, vehicles require more sub-steps at very low forward speeds.
        The threshold longitudinal speed has a default value of 5 metres per second.
  **/
  public var ThresholdLongitudinalSpeed : unreal.Float32;
  
  /**
    Clamp normalized tire load to this value
  **/
  public var MaxNormalizedTireLoadFiltered : unreal.Float32;
  
  /**
    Clamp normalized tire load to this value
  **/
  public var MaxNormalizedTireLoad : unreal.Float32;
  
  /**
    Clamp normalized tire load to this value
  **/
  public var MinNormalizedTireLoadFiltered : unreal.Float32;
  
  /**
    Clamp normalized tire load to this value
  **/
  public var MinNormalizedTireLoad : unreal.Float32;
  
  /**
    Scales the vehicle's inertia in each direction (forward, right, up)
  **/
  public var InertiaTensorScale : unreal.FVector;
  
  /**
    Debug drag magnitude last applied
  **/
  public var DebugDragMagnitude : unreal.Float32;
  
  /**
    Max RPM for engine
  **/
  public var MaxEngineRPM : unreal.Float32;
  
  /**
    Estimated mad speed for engine
  **/
  public var EstimatedMaxEngineSpeed : unreal.Float32;
  
  /**
    Drag area in cm^2
  **/
  public var DragArea : unreal.Float32;
  
  /**
    Chassis height used for drag force computation (cm)
  **/
  public var ChassisHeight : unreal.Float32;
  
  /**
    Chassis width used for drag force computation (cm)
  **/
  public var ChassisWidth : unreal.Float32;
  
  /**
    DragCoefficient of the vehicle chassis.
  **/
  public var DragCoefficient : unreal.Float32;
  
  /**
    Mass to set the vehicle chassis to. It's much easier to tweak vehicle settings when
    the mass doesn't change due to tweaks with the physics asset. [kg]
  **/
  public var Mass : unreal.Float32;
  
  /**
    Wheels to create
  **/
  public var WheelSetups : unreal.TArray<unreal.FWheelSetup>;
  
}
