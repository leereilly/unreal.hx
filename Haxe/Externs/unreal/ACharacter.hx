/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  Characters are Pawns that have a mesh, collision, and built-in movement logic.
  They are responsible for all physical interaction between the player or AI and the world, and also implement basic networking and input models.
  They are designed for a vertically-oriented player representation that can walk, jump, fly, and swim through the world using CharacterMovementComponent.
  
  @see APawn, UCharacterMovementComponent
  @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Pawn/Character/
**/
@:glueCppIncludes("GameFramework/Character.h", "Engine.h")
@:uextern extern class ACharacter extends unreal.APawn {
  
  /**
    Replicated Root Motion montage
  **/
  public var RepRootMotion : unreal.FRepRootMotionMontage;
  
  /**
    Array of previously received root motion moves from the server.
  **/
  public var RootMotionRepMoves : unreal.TArray<unreal.FSimulatedRootMotionReplicatedMove>;
  
  /**
    For LocallyControlled Autonomous clients. Saved root motion data to be used by SavedMoves.
  **/
  public var ClientRootMotionParams : unreal.FRootMotionMovementParams;
  
  /**
    The max time the jump key can be held.
    Note that if StopJumping() is not called before the max jump hold time is reached,
    then the character will carry on receiving vertical velocity. Therefore it is usually
    best to call StopJumping() when jump input has ceased (such as a button up event).
  **/
  public var JumpMaxHoldTime : unreal.Float32;
  
  /**
    Jump key Held Time.
    This is the time that the player has held the jump key, in seconds.
  **/
  public var JumpKeyHoldTime : unreal.Float32;
  
  /**
    Disable root motion on the server. When receiving a DualServerMove, where the first move is not root motion and the second is.
  **/
  public var bServerMoveIgnoreRootMotion : Bool;
  
  /**
    Disable simulated gravity (set when character encroaches geometry on client, to keep him from falling through floors)
  **/
  public var bSimGravityDisabled : Bool;
  
  /**
    If server disagrees with root motion track position, client has to resimulate root motion from last AckedMove.
  **/
  public var bClientResimulateRootMotion : Bool;
  
  /**
    True if Pawn was initially falling when started to replay network moves.
  **/
  public var bClientWasFalling : Bool;
  
  /**
    When true, applying updates to network client (replaying saved moves for a locally controlled character)
  **/
  public var bClientUpdating : Bool;
  
  /**
    When true, player wants to jump
  **/
  public var bPressedJump : Bool;
  
  /**
    Set by character movement to specify that this Character is currently crouched.
  **/
  public var bIsCrouched : Bool;
  
  /**
    Default crouched eye height
  **/
  public var CrouchedEyeHeight : unreal.Float32;
  
  /**
    CharacterMovement MovementMode (and custom mode) replicated for simulated proxies. Use CharacterMovementComponent::UnpackNetworkMovementMode() to translate it.
  **/
  private var ReplicatedMovementMode : unreal.UInt8;
  
  /**
    Saved rotation offset of mesh.
  **/
  private var BaseRotationOffset : unreal.FQuat;
  
  /**
    Saved translation offset of mesh.
  **/
  private var BaseTranslationOffset : unreal.FVector;
  
  /**
    Replicated version of relative movement. Read-only on simulated proxies!
  **/
  private var ReplicatedBasedMovement : unreal.FBasedMovementInfo;
  
  /**
    Info about our current movement base (object we are standing on).
  **/
  private var BasedMovement : unreal.FBasedMovementInfo;
  public var CapsuleComponent : unreal.UCapsuleComponent;
  public var CharacterMovement : unreal.UCharacterMovementComponent;
  #if WITH_EDITORONLY_DATA
  public var ArrowComponent : unreal.UArrowComponent;
  #end // WITH_EDITORONLY_DATA
  public var Mesh : unreal.USkeletalMeshComponent;
  
}
