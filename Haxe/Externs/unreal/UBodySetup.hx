/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  BodySetup contains all collision information that is associated with a single asset.
  A single BodySetup instance is shared among many BodyInstances so that geometry data is not duplicated.
  Assets typically implement a GetBodySetup function that is used during physics state creation.
  
  @see GetBodySetup
  @see FBodyInstance
**/
@:glueCppIncludes("PhysicsEngine/BodySetup.h")
@:uextern extern class UBodySetup extends unreal.UObject {
  
  /**
    Build scale for this body setup (static mesh settings define this value)
  **/
  public var BuildScale3D : unreal.FVector;
  public var BuildScale_DEPRECATED : unreal.Float32;
  
  /**
    Custom walkable slope setting for this body.
  **/
  public var WalkableSlopeOverride : unreal.FWalkableSlopeOverride;
  
  /**
    Default properties of the body instance, copied into objects on instantiation, was URB_BodyInstance
  **/
  public var DefaultInstance : unreal.FBodyInstance;
  
  /**
    Collision Trace behavior - by default, it will keep simple(convex)/complex(per-poly) separate *
  **/
  public var CollisionTraceFlag : unreal.ECollisionTraceFlag;
  
  /**
    Collision Type for this body. This eventually changes response to collision to others *
  **/
  public var CollisionReponse : unreal.EBodyCollisionResponse;
  
  /**
    Physical material to use for simple collision on this body. Encodes information about density, friction etc.
  **/
  public var PhysMaterial : unreal.UPhysicalMaterial;
  
  /**
    Should we generate data necessary to support collision on mirrored versions of this mesh.
    This halves the collision data size for this mesh, but disables collision on mirrored instances of the body.
  **/
  public var bGenerateMirroredCollision : Bool;
  
  /**
    Whether the cooked data is shared by multiple body setups. This is needed for per poly collision case where we don't want to duplicate cooked data, but still need multiple body setups for in place geometry changes
  **/
  public var bSharedCookedData : Bool;
  
  /**
    Should we generate data necessary to support collision on normal (non-mirrored) versions of this body.
  **/
  public var bGenerateNonMirroredCollision : Bool;
  
  /**
    If true, the physics triangle mesh will use double sided faces when doing scene queries.
    This is useful for planes and single sided meshes that need traces to work on both sides.
  **/
  public var bDoubleSidedGeometry : Bool;
  
  /**
    If true, the physics of this mesh (only affects static meshes) will always contain ALL elements from the mesh - not just the ones enabled for collision.
    This is useful for forcing high detail collisions using the entire render mesh.
  **/
  public var bMeshCollideAll : Bool;
  
  /**
    Should this BodySetup be considered for the bounding box of the PhysicsAsset (and hence SkeletalMeshComponent).
    There is a speed improvement from having less BodySetups processed each frame when updating the bounds.
  **/
  public var bConsiderForBounds : Bool;
  
  /**
    If true (and bEnableFullAnimWeightBodies in SkelMeshComp is true), the physics of this bone will always be blended into the skeletal mesh, regardless of what PhysicsWeight of the SkelMeshComp is.
    This is useful for bones that should always be physics, even when blending physics in and out for hit reactions (eg cloth or pony-tails).
  **/
  public var bAlwaysFullAnimWeight_DEPRECATED : Bool;
  
  /**
    If Unfixed it will use physics. If fixed, it will use kinematic. Default will inherit from OwnerComponent's behavior.
  **/
  public var PhysicsType : unreal.EPhysicsType;
  
  /**
    Used in the PhysicsAsset case. Associates this Body with Bone in a skeletal mesh.
  **/
  public var BoneName : unreal.FName;
  
  /**
    Simplified collision representation of this
  **/
  public var AggGeom : unreal.FKAggregateGeom;
  
}
