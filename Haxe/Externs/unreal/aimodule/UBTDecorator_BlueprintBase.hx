/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal.aimodule;


/**
  Base class for blueprint based decorator nodes. Do NOT use it for creating native c++ classes!
  
  Unlike task and services, decorator have two execution chains:
   ExecutionStart-ExecutionFinish and ObserverActivated-ObserverDeactivated
  which makes automatic latent action cleanup impossible. Keep in mind, that
  you HAVE TO verify is given chain is still active after resuming from any
  latent action (like Delay, Timelines, etc).
  
  Helper functions:
  - IsDecoratorExecutionActive (true after ExecutionStart, until ExecutionFinish)
  - IsDecoratorObserverActive (true after ObserverActivated, until ObserverDeactivated)
**/
@:umodule("AIModule")
@:glueCppIncludes("BehaviorTree/Decorators/BTDecorator_BlueprintBase.h", "Engine.h")
@:uextern extern class UBTDecorator_BlueprintBase extends unreal.aimodule.UBTDecorator {
  
  /**
    blackboard key names that should be observed
  **/
  private var ObservedKeyNames : unreal.TArray<unreal.FName>;
  
  /**
    Cached AIController owner of BehaviorTreeComponent.
  **/
  private var ActorOwner : unreal.AActor;
  
  /**
    Cached AIController owner of BehaviorTreeComponent.
  **/
  private var AIOwner : unreal.aimodule.AAIController;
  
}
