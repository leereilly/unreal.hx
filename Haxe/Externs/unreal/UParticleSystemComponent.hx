/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  A particle emitter.
**/
@:glueCppIncludes("Particles/ParticleSystemComponent.h")
@:uextern extern class UParticleSystemComponent extends unreal.UPrimitiveComponent {
  
  /**
    Scales DeltaTime in UParticleSystemComponent::Tick(...)
  **/
  public var CustomTimeDilation : unreal.Float32;
  
  /**
    Array of replay clips for this particle system component.  These are serialized to disk.  You really should never add anything to this in the editor.  It's exposed so that you can delete clips if you need to, but be careful when doing so!
  **/
  public var ReplayClips : unreal.TArray<unreal.UParticleSystemReplay>;
  
  /**
    The view relevance flags for each LODLevel.
  **/
  public var CachedViewRelevanceFlags : unreal.TArray<unreal.FMaterialRelevance>;
  
  /**
    Flag indicating that dynamic updating of render data should NOT occur during Tick.
    This is used primarily to allow for warming up and simulated effects to a certain state.
  **/
  public var bSkipUpdateDynamicDataDuringTick : Bool;
  
  /**
    The method of LOD level determination to utilize for this particle system
  **/
  public var LODMethod : unreal.ParticleSystemLODMethod;
  
  /**
    indicates that the component's LODMethod overrides the Template's
  **/
  public var bOverrideLODMethod : Bool;
  #if WITH_EDITORONLY_DATA
  
  /**
    Used for applying Cascade's detail mode setting to in-level particle systems
  **/
  public var EditorDetailMode : unreal.Int32;
  
  /**
    INTERNAL. Used by the editor to set the LODLevel
  **/
  public var EditorLODLevel : unreal.Int32;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Time between forced UpdateTransforms for systems that use dynamically calculated bounds,
    Which is effectively how often the bounds are shrunk.
  **/
  public var MaxTimeBeforeForceUpdateTransform : unreal.Float32;
  
  /**
    Number of seconds of emitter not being rendered that need to pass before it
    no longer gets ticked/ becomes inactive.
  **/
  public var SecondsBeforeInactive : unreal.Float32;
  public var bWarmingUp : Bool;
  public var WarmupTickRate : unreal.Float32;
  public var WarmupTime : unreal.Float32;
  public var PartSysVelocity : unreal.FVector;
  public var OldPosition : unreal.FVector;
  
  /**
    Array holding name instance parameters for this ParticleSystemComponent.
    Parameters can be used in Cascade using DistributionFloat/VectorParticleParameters.
  **/
  public var InstanceParameters : unreal.TArray<unreal.FParticleSysParam>;
  
  /**
    whether to update the particle system on dedicated servers
  **/
  public var bUpdateOnDedicatedServer : Bool;
  public var bResetOnDetach : Bool;
  
  /**
    The skeletal mesh components used with the socket location module.
    This is to prevent them from being garbage collected.
  **/
  public var SkelMeshComponents : unreal.TArray<unreal.USkeletalMeshComponent>;
  public var EmitterMaterials : unreal.TArray<unreal.UMaterialInterface>;
  public var Template : unreal.UParticleSystem;
  
}
