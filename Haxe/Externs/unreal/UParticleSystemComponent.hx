/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  A particle emitter.
**/
@:glueCppIncludes("Particles/ParticleSystemComponent.h")
@:uextern extern class UParticleSystemComponent extends unreal.UPrimitiveComponent {
  
  /**
    Scales DeltaTime in UParticleSystemComponent::Tick(...)
  **/
  public var CustomTimeDilation : unreal.Float32;
  
  /**
    The view relevance flags for each LODLevel.
  **/
  public var CachedViewRelevanceFlags : unreal.TArray<unreal.FMaterialRelevance>;
  
  /**
    Flag indicating that dynamic updating of render data should NOT occur during Tick.
    This is used primarily to allow for warming up and simulated effects to a certain state.
  **/
  public var bSkipUpdateDynamicDataDuringTick : Bool;
  
  /**
    The method of LOD level determination to utilize for this particle system
  **/
  public var LODMethod : unreal.ParticleSystemLODMethod;
  
  /**
    indicates that the component's LODMethod overrides the Template's
  **/
  public var bOverrideLODMethod : Bool;
  #if WITH_EDITORONLY_DATA
  
  /**
    Used for applying Cascade's detail mode setting to in-level particle systems
  **/
  public var EditorDetailMode : unreal.Int32;
  
  /**
    INTERNAL. Used by the editor to set the LODLevel
  **/
  public var EditorLODLevel : unreal.Int32;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Time between forced UpdateTransforms for systems that use dynamically calculated bounds,
    Which is effectively how often the bounds are shrunk.
  **/
  public var MaxTimeBeforeForceUpdateTransform : unreal.Float32;
  
  /**
    Number of seconds of emitter not being rendered that need to pass before it
    no longer gets ticked/ becomes inactive.
  **/
  public var SecondsBeforeInactive : unreal.Float32;
  public var bWarmingUp : Bool;
  public var WarmupTickRate : unreal.Float32;
  public var WarmupTime : unreal.Float32;
  public var PartSysVelocity : unreal.FVector;
  public var OldPosition : unreal.FVector;
  
  /**
    whether to update the particle system on dedicated servers
  **/
  public var bUpdateOnDedicatedServer : Bool;
  public var bResetOnDetach : Bool;
  
  /**
    The skeletal mesh components used with the socket location module.
    This is to prevent them from being garbage collected.
  **/
  public var SkelMeshComponents : unreal.TArray<unreal.USkeletalMeshComponent>;
  public var EmitterMaterials : unreal.TArray<unreal.UMaterialInterface>;
  public var Template : unreal.UParticleSystem;
  
  /**
    Set the beam end point
    
    @param  EmitterIndex            The index of the emitter to set it on
    @param  NewEndPoint                     The value to set it to
  **/
  public function SetBeamEndPoint(EmitterIndex : unreal.Int32, NewEndPoint : unreal.FVector) : Void;
  
  /**
    Set the beam source point
    
    @param  EmitterIndex            The index of the emitter to set it on
    @param  NewSourcePoint          The value to set it to
    @param  SourceIndex                     Which beam within the emitter to set it on
  **/
  public function SetBeamSourcePoint(EmitterIndex : unreal.Int32, NewSourcePoint : unreal.FVector, SourceIndex : unreal.Int32) : Void;
  
  /**
    Set the beam source tangent
    
    @param  EmitterIndex            The index of the emitter to set it on
    @param  NewTangentPoint         The value to set it to
    @param  SourceIndex                     Which beam within the emitter to set it on
  **/
  public function SetBeamSourceTangent(EmitterIndex : unreal.Int32, NewTangentPoint : unreal.FVector, SourceIndex : unreal.Int32) : Void;
  
  /**
    Set the beam source strength
    
    @param  EmitterIndex            The index of the emitter to set it on
    @param  NewSourceStrength       The value to set it to
    @param  SourceIndex                     Which beam within the emitter to set it on
  **/
  public function SetBeamSourceStrength(EmitterIndex : unreal.Int32, NewSourceStrength : unreal.Float32, SourceIndex : unreal.Int32) : Void;
  
  /**
    Set the beam target point
    
    @param  EmitterIndex            The index of the emitter to set it on
    @param  NewTargetPoint          The value to set it to
    @param  TargetIndex                     Which beam within the emitter to set it on
  **/
  public function SetBeamTargetPoint(EmitterIndex : unreal.Int32, NewTargetPoint : unreal.FVector, TargetIndex : unreal.Int32) : Void;
  
  /**
    Set the beam target tangent
    
    @param  EmitterIndex            The index of the emitter to set it on
    @param  NewTangentPoint         The value to set it to
    @param  TargetIndex                     Which beam within the emitter to set it on
  **/
  public function SetBeamTargetTangent(EmitterIndex : unreal.Int32, NewTangentPoint : unreal.FVector, TargetIndex : unreal.Int32) : Void;
  
  /**
    Set the beam target strength
    
    @param  EmitterIndex            The index of the emitter to set it on
    @param  NewTargetStrength       The value to set it to
    @param  TargetIndex                     Which beam within the emitter to set it on
  **/
  public function SetBeamTargetStrength(EmitterIndex : unreal.Int32, NewTargetStrength : unreal.Float32, TargetIndex : unreal.Int32) : Void;
  
  /**
    Enables/Disables a sub-emitter
    
    @param  EmitterName                     The name of the sub-emitter to set it on
    @param  bNewEnableState         The value to set it to
  **/
  public function SetEmitterEnable(EmitterName : unreal.FName, bNewEnableState : Bool) : Void;
  
  /**
    Change a named float parameter
  **/
  @:final public function SetFloatParameter(ParameterName : unreal.FName, Param : unreal.Float32) : Void;
  
  /**
    Set a named vector instance parameter on this ParticleSystemComponent.
    Updates the parameter if it already exists, or creates a new entry if not.
  **/
  @:final public function SetVectorParameter(ParameterName : unreal.FName, Param : unreal.FVector) : Void;
  
  /**
    Set a named color instance parameter on this ParticleSystemComponent.
    Updates the parameter if it already exists, or creates a new entry if not.
  **/
  @:final public function SetColorParameter(ParameterName : unreal.FName, Param : unreal.FLinearColor) : Void;
  
  /**
    Set a named actor instance parameter on this ParticleSystemComponent.
    Updates the parameter if it already exists, or creates a new entry if not.
  **/
  @:final public function SetActorParameter(ParameterName : unreal.FName, Param : unreal.AActor) : Void;
  
  /**
    Set a named material instance parameter on this ParticleSystemComponent.
    Updates the parameter if it already exists, or creates a new entry if not.
  **/
  @:final public function SetMaterialParameter(ParameterName : unreal.FName, Param : unreal.UMaterialInterface) : Void;
  
  /**
    Change the ParticleSystem used by this ParticleSystemComponent
  **/
  @:final public function SetTemplate(NewTemplate : unreal.UParticleSystem) : Void;
  
  /**
    Get the current number of active particles in this system
  **/
  @:thisConst @:final public function GetNumActiveParticles() : unreal.Int32;
  
  /**
    Begins all trail emitters in this component.
    
    @param        InFirstSocketName       The name of the first socket for the trail.
    @param        InSecondSocketName      The name of the second socket for the trail.
    @param        InWidthMode                     How the width value is applied to the trail.
    @param        InWidth                         The width of the trail.
  **/
  @:final public function BeginTrails(InFirstSocketName : unreal.FName, InSecondSocketName : unreal.FName, InWidthMode : unreal.ETrailWidthMode, InWidth : unreal.Float32) : Void;
  
  /**
    Ends all trail emitters in this component.
  **/
  @:final public function EndTrails() : Void;
  
  /**
    Sets the defining data for all trails in this component.
    
    @param        InFirstSocketName       The name of the first socket for the trail.
    @param        InSecondSocketName      The name of the second socket for the trail.
    @param        InWidthMode                     How the width value is applied to the trail.
    @param        InWidth                         The width of the trail.
  **/
  @:final public function SetTrailSourceData(InFirstSocketName : unreal.FName, InSecondSocketName : unreal.FName, InWidthMode : unreal.ETrailWidthMode, InWidth : unreal.Float32) : Void;
  
  /**
    Creates a Dynamic Material Instance for the specified named material override, optionally from the supplied material.
    @param Name - The slot name of the material to replace.  If invalid, the material is unchanged and NULL is returned.
  **/
  public function CreateNamedDynamicMaterialInstance(InName : unreal.FName, SourceMaterial : unreal.UMaterialInterface) : unreal.UMaterialInstanceDynamic;
  
  /**
    Returns a named material. If this named material is not found, returns NULL.
  **/
  @:thisConst public function GetNamedMaterial(InName : unreal.FName) : unreal.UMaterialInterface;
  
  /**
    Record a kismet event.
    
    @param  InEventName                             The name of the event that fired.
    @param  InEmitterTime                   The emitter time when the event fired.
    @param  InLocation                              The location of the particle when the event fired.
    @param  InVelocity                              The velocity of the particle when the event fired.
    @param  InNormal                                Normal vector of the collision in coordinate system of the returner. Zero=none.
  **/
  @:final public function GenerateParticleEvent(InEventName : unreal.Const<unreal.FName>, InEmitterTime : unreal.Float32, InLocation : unreal.Const<unreal.FVector>, InDirection : unreal.Const<unreal.FVector>, InVelocity : unreal.Const<unreal.FVector>) : Void;
  
}
