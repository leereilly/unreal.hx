/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  Represents a camera viewpoint and settings, such as projection type, field of view, and post-process overrides.
  The default behavior for an actor used as the camera view target is to look for an attached camera component and use its location, rotation, and settings.
**/
@:glueCppIncludes("Camera/CameraComponent.h", "Engine.h")
@:uextern extern class UCameraComponent extends unreal.USceneComponent {
  
  /**
    DEPRECATED: use bUsePawnControlRotation instead
  **/
  public var bUseControllerViewRotation_DEPRECATED : Bool;
  #if WITH_EDITORONLY_DATA
  
  /**
    The camera mesh to show visually where the camera is placed
  **/
  private var ProxyMeshComponent : unreal.UStaticMeshComponent;
  private var CameraMesh : unreal.UStaticMesh;
  
  /**
    The frustum component used to show visually where the camera field of view is
  **/
  private var DrawFrustum : unreal.UDrawFrustumComponent;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Post process settings to use for this camera. Don't forget to check the properties you want to override
  **/
  public var PostProcessSettings : unreal.FPostProcessSettings;
  
  /**
    Indicates if PostProcessSettings should be used when using this Camera to view through.
  **/
  public var PostProcessBlendWeight : unreal.Float32;
  
  /**
    The type of camera
  **/
  public var ProjectionMode : unreal.ECameraProjectionMode;
  
  /**
    If this camera component is placed on a pawn, should it use the view/control rotation of the pawn where possible?
    @see APawn::GetViewRotation()
  **/
  public var bUsePawnControlRotation : Bool;
  
  /**
    If true, account for the field of view angle when computing which level of detail to use for meshes.
  **/
  public var bUseFieldOfViewForLOD : Bool;
  
  /**
    If bConstrainAspectRatio is true, black bars will be added if the destination view has a different aspect ratio than this camera requested.
  **/
  public var bConstrainAspectRatio : Bool;
  
  /**
    Aspect Ratio (Width/Height)
  **/
  public var AspectRatio : unreal.Float32;
  
  /**
    The far plane distance of the orthographic view (in world units)
  **/
  public var OrthoFarClipPlane : unreal.Float32;
  
  /**
    The near plane distance of the orthographic view (in world units)
  **/
  public var OrthoNearClipPlane : unreal.Float32;
  
  /**
    The desired width (in world units) of the orthographic view (ignored in Perspective mode)
  **/
  public var OrthoWidth : unreal.Float32;
  
  /**
    The horizontal field of view (in degrees) in perspective mode (ignored in Orthographic mode)
  **/
  public var FieldOfView : unreal.Float32;
  
}
