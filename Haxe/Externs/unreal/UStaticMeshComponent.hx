/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  StaticMeshComponent is used to create an instance of a UStaticMesh.
  A static mesh is a piece of geometry that consists of a static set of polygons.
  
  @see https://docs.unrealengine.com/latest/INT/Engine/Content/Types/StaticMeshes/
  @see UStaticMesh
**/
@:glueCppIncludes("Components/StaticMeshComponent.h")
@:uextern extern class UStaticMeshComponent extends unreal.UMeshComponent {
  
  /**
    The Lightmass settings for this object.
  **/
  public var LightmassSettings : unreal.FLightmassPrimitiveSettings;
  #if WITH_EDITORONLY_DATA
  
  /**
    Derived data key of the static mesh, used to determine if an update from the source static mesh is required.
  **/
  public var StaticMeshDerivedDataKey : unreal.FString;
  #end // WITH_EDITORONLY_DATA
  public var IrrelevantLights : unreal.TArray<unreal.FGuid>;
  
  /**
    Whether to use subdivisions or just the triangle's vertices.
  **/
  public var bUseSubDivisions : Bool;
  
  /**
    Subdivision step size for static vertex lighting.
  **/
  public var SubDivisionStepSize : unreal.Int32;
  
  /**
    Allows adjusting the desired resolution of streaming textures that uses UV 0.  1.0 is the default, whereas a higher value increases the streamed-in resolution.
  **/
  public var StreamingDistanceMultiplier : unreal.Float32;
  
  /**
    Light map resolution to use on this component, used if bOverrideLightMapRes is true
  **/
  public var OverriddenLightMapRes : unreal.Int32;
  
  /**
    Whether to override the lightmap resolution defined in the static mesh.
  **/
  public var bOverrideLightMapRes : Bool;
  
  /**
    Ignore this instance of this static mesh when calculating streaming information.
    This can be useful when doing things like applying character textures to static geometry,
    to avoid them using distance-based streaming.
  **/
  public var bIgnoreInstanceForTextureStreaming : Bool;
  #if WITH_EDITORONLY_DATA
  
  /**
    The section currently selected in the Editor.
  **/
  public var SelectedEditorSection : unreal.Int32;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Wireframe color to use if bOverrideWireframeColor is true
  **/
  public var WireframeColorOverride : unreal.FColor;
  
  /**
    If true, WireframeColorOverride will be used. If false, color is determined based on mobility and physics simulation settings
  **/
  public var bOverrideWireframeColor : Bool;
  public var StaticMesh : unreal.UStaticMesh;
  
  /**
    Specifies the smallest LOD that will be used for this component.
    This is ignored if ForcedLodModel is enabled.
  **/
  public var MinLOD : unreal.Int32;
  
  /**
    Whether to override the MinLOD setting of the static mesh asset with the MinLOD of this component.
  **/
  public var bOverrideMinLOD : Bool;
  
  /**
    LOD that was desired for rendering this StaticMeshComponent last frame.
  **/
  public var PreviousLODLevel : unreal.Int32;
  
  /**
    If 0, auto-select LOD level. if >0, force to (ForcedLodModel-1).
  **/
  public var ForcedLodModel : unreal.Int32;
  @:final public function OnRep_StaticMesh(OldStaticMesh : unreal.UStaticMesh) : Void;
  
  /**
    Change the StaticMesh used by this instance.
  **/
  public function SetStaticMesh(NewMesh : unreal.UStaticMesh) : Bool;
  @:final public function SetForcedLodModel(NewForcedLodModel : unreal.Int32) : Void;
  
  /**
    Get Local bounds
  **/
  @:thisConst @:final public function GetLocalBounds(Min : unreal.PRef<unreal.FVector>, Max : unreal.PRef<unreal.FVector>) : Void;
  
}
