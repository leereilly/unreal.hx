/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:glueCppIncludes("Particles/Light/ParticleModuleLight.h")
@:uextern extern class UParticleModuleLight extends unreal.UParticleModule {
  
  /**
    Provides the light's exponent when inverse squared falloff is disabled.
  **/
  public var LightExponent : unreal.FRawDistributionFloat;
  
  /**
    Scales the particle's radius, to calculate the light's radius.
  **/
  public var RadiusScale : unreal.FRawDistributionFloat;
  
  /**
    Brightness scale for the light, which can be setup as a curve over the particle's lifetime.
  **/
  public var BrightnessOverLife : unreal.FRawDistributionFloat;
  
  /**
    Scale that is applied to the particle's color to calculate the light's color, and can be setup as a curve over the particle's lifetime.
  **/
  public var ColorScaleOverLife : unreal.FRawDistributionVector;
  
  /**
    Fraction of particles in this emitter to create lights on.
  **/
  public var SpawnFraction : unreal.Float32;
  
  /**
    Will draw wireframe spheres to preview the light radius if enabled.
    Note: this is intended for previewing and the value will not be saved, it will always revert to disabled.
  **/
  public var bPreviewLightRadius : Bool;
  
  /**
    Whether lights from this module should affect translucency.
    Use with caution.  Modules enabling this should only make a few particle lights at most, and the smaller they are, the less they will cost.
  **/
  public var bAffectsTranslucency : Bool;
  
  /**
    Whether to use physically based inverse squared falloff from the light.  If unchecked, the LightExponent distribution will be used instead.
  **/
  public var bUseInverseSquaredFalloff : Bool;
  
}
