/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  A Spline Mesh Component is a derivation of a Static Mesh Component which can be deformed using a spline. Only a start and end position (and tangent) can be specified.
  @see https://docs.unrealengine.com/latest/INT/Resources/ContentExamples/Blueprint_Splines
**/
@:glueCppIncludes("Components/SplineMeshComponent.h")
@:uextern extern class USplineMeshComponent extends unreal.UStaticMeshComponent implements unreal.IInterface_CollisionDataProvider {
  #if WITH_EDITORONLY_DATA
  public var bSelected : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Used to automatically trigger rebuild of collision data
  **/
  public var CachedMeshBodySetupGuid : unreal.FGuid;
  
  /**
    Physics data.
  **/
  public var BodySetup : unreal.UBodySetup;
  
  /**
    Maximum coordinate along the spline forward axis which corresponds to end of spline. If set to 0.0, will use bounding box to determine bounds
  **/
  public var SplineBoundaryMax : unreal.Float32;
  
  /**
    Minimum coordinate along the spline forward axis which corresponds to start of spline. If set to 0.0, will use bounding box to determine bounds
  **/
  public var SplineBoundaryMin : unreal.Float32;
  
  /**
    Chooses the forward axis for the spline mesh orientation
  **/
  public var ForwardAxis : unreal.ESplineMeshAxis;
  
  /**
    If true, will use smooth interpolation (ease in/out) for Scale, Roll, and Offset along this section of spline. If false, uses linear
  **/
  public var bSmoothInterpRollScale : Bool;
  
  /**
    If true, spline keys may be edited per instance in the level viewport. Otherwise, the spline should be initialized in the construction script.
  **/
  public var bAllowSplineEditingPerInstance : Bool;
  
  /**
    Axis (in component space) that is used to determine X axis for co-ordinates along spline
  **/
  public var SplineUpDir : unreal.FVector;
  
  /**
    Spline that is used to deform mesh
  **/
  public var SplineParams : unreal.FSplineMeshParams;
  
  /**
    Get the start position of spline in local space
  **/
  @:thisConst @:final public function GetStartPosition() : unreal.FVector;
  
  /**
    Set the start position of spline in local space
  **/
  @:final public function SetStartPosition(StartPos : unreal.FVector) : Void;
  
  /**
    Get the start tangent vector of spline in local space
  **/
  @:thisConst @:final public function GetStartTangent() : unreal.FVector;
  
  /**
    Set the start tangent vector of spline in local space
  **/
  @:final public function SetStartTangent(StartTangent : unreal.FVector) : Void;
  
  /**
    Get the end position of spline in local space
  **/
  @:thisConst @:final public function GetEndPosition() : unreal.FVector;
  
  /**
    Set the end position of spline in local space
  **/
  @:final public function SetEndPosition(EndPos : unreal.FVector) : Void;
  
  /**
    Get the end tangent vector of spline in local space
  **/
  @:thisConst @:final public function GetEndTangent() : unreal.FVector;
  
  /**
    Set the end tangent vector of spline in local space
  **/
  @:final public function SetEndTangent(EndTangent : unreal.FVector) : Void;
  
  /**
    Set the start and end, position and tangent, all in local space
  **/
  @:final public function SetStartAndEnd(StartPos : unreal.FVector, StartTangent : unreal.FVector, EndPos : unreal.FVector, EndTangent : unreal.FVector) : Void;
  
  /**
    Get the start scaling
  **/
  @:thisConst @:final public function GetStartScale() : unreal.FVector2D;
  
  /**
    Set the start scaling
  **/
  @:final public function SetStartScale(StartScale : unreal.FVector2D) : Void;
  
  /**
    Get the start roll
  **/
  @:thisConst @:final public function GetStartRoll() : unreal.Float32;
  
  /**
    Set the start roll
  **/
  @:final public function SetStartRoll(StartRoll : unreal.Float32) : Void;
  
  /**
    Get the start offset
  **/
  @:thisConst @:final public function GetStartOffset() : unreal.FVector2D;
  
  /**
    Set the start offset
  **/
  @:final public function SetStartOffset(StartOffset : unreal.FVector2D) : Void;
  
  /**
    Get the end scaling
  **/
  @:thisConst @:final public function GetEndScale() : unreal.FVector2D;
  
  /**
    Set the end scaling
  **/
  @:final public function SetEndScale(EndScale : unreal.FVector2D) : Void;
  
  /**
    Get the end roll
  **/
  @:thisConst @:final public function GetEndRoll() : unreal.Float32;
  
  /**
    Set the end roll
  **/
  @:final public function SetEndRoll(EndRoll : unreal.Float32) : Void;
  
  /**
    Get the end offset
  **/
  @:thisConst @:final public function GetEndOffset() : unreal.FVector2D;
  
  /**
    Set the end offset
  **/
  @:final public function SetEndOffset(EndOffset : unreal.FVector2D) : Void;
  
  /**
    Get the forward axis
  **/
  @:thisConst @:final public function GetForwardAxis() : unreal.ESplineMeshAxis;
  
  /**
    Set the forward axis
  **/
  @:final public function SetForwardAxis(InForwardAxis : unreal.ESplineMeshAxis) : Void;
  
  /**
    Get the spline up direction
  **/
  @:thisConst @:final public function GetSplineUpDir() : unreal.FVector;
  
  /**
    Set the spline up direction
  **/
  @:final public function SetSplineUpDir(InSplineUpDir : unreal.Const<unreal.PRef<unreal.FVector>>) : Void;
  
  /**
    Get the boundary min
  **/
  @:thisConst @:final public function GetBoundaryMin() : unreal.Float32;
  
  /**
    Set the boundary min
  **/
  @:final public function SetBoundaryMin(InBoundaryMin : unreal.Float32) : Void;
  
  /**
    Get the boundary max
  **/
  @:thisConst @:final public function GetBoundaryMax() : unreal.Float32;
  
  /**
    Set the boundary max
  **/
  @:final public function SetBoundaryMax(InBoundaryMax : unreal.Float32) : Void;
  // Interface_CollisionDataProvider interface implementation
  
}
