/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  PlayerControllers are used by human players to control Pawns.
  
  ControlRotation (accessed via GetControlRotation()), determines the aiming
  orientation of the controlled Pawn.
  
  In networked games, PlayerControllers exist on the server for every player-controlled pawn,
  and also on the controlling client's machine. They do NOT exist on a client's
  machine for pawns controlled by remote players elsewhere on the network.
  
  @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Controller/PlayerController/
**/
@:glueCppIncludes("GameFramework/PlayerController.h")
@:uextern extern class APlayerController extends unreal.AController {
  
  /**
    The value of SeamlessTravelCount, upon the last call to GameMode::HandleSeamlessTravelPlayer; used to detect seamless travel
  **/
  public var LastCompletedSeamlessTravelCount : unreal.UInt16;
  
  /**
    Counter for this players seamless travels (used along with the below value, to restrict ServerNotifyLoadedWorld)
  **/
  public var SeamlessTravelCount : unreal.UInt16;
  
  /**
    The location used internally when there is no pawn or spectator, to know where to spawn the spectator or focus the camera on death.
  **/
  private var SpawnLocation : unreal.FVector;
  
  /**
    The currently set touch interface
  **/
  private var CurrentTouchInterface : unreal.UTouchInterface;
  
  /**
    InputComponent we use when player is in Inactive state.
  **/
  private var InactiveStateInputComponent : unreal.UInputComponent;
  public var HitResultTraceDistance : unreal.Float32;
  
  /**
    Trace channel currently being used for determining what world object was clicked on.
  **/
  public var CurrentClickTraceChannel : unreal.ECollisionChannel;
  
  /**
    Default trace channel used for determining what world object was clicked on.
  **/
  public var DefaultClickTraceChannel : unreal.ECollisionChannel;
  public var CurrentMouseCursor : unreal.EMouseCursor;
  public var DefaultMouseCursor : unreal.EMouseCursor;
  public var bForceFeedbackEnabled : Bool;
  
  /**
    Whether actor/component touch over events should be generated.
  **/
  public var bEnableTouchOverEvents : Bool;
  
  /**
    Whether actor/component mouse over events should be generated.
  **/
  public var bEnableMouseOverEvents : Bool;
  
  /**
    Whether actor/component touch events should be generated.
  **/
  public var bEnableTouchEvents : Bool;
  
  /**
    Whether actor/component click events should be generated.
  **/
  public var bEnableClickEvents : Bool;
  
  /**
    Whether the mouse cursor should be displayed.
  **/
  public var bShowMouseCursor : Bool;
  
  /**
    Roll input speed scaling
  **/
  public var InputRollScale : unreal.Float32;
  
  /**
    Pitch input speed scaling
  **/
  public var InputPitchScale : unreal.Float32;
  
  /**
    Yaw input speed scaling
  **/
  public var InputYawScale : unreal.Float32;
  
  /**
    The net connection this controller is communicating on, NULL for local players on server
  **/
  public var NetConnection : unreal.UNetConnection;
  
  /**
    this is set on the OLD PlayerController when performing a swap over a network connection
    so we know what connection we're waiting on acknowledgment from to finish destroying this PC
    (or when the connection is closed)
    @see GameMode::SwapPlayerControllers()
  **/
  public var PendingSwapConnection : unreal.UNetConnection;
  
  /**
    index identifying players using the same base connection (splitscreen clients)
    Used by netcode to match replicated PlayerControllers to the correct splitscreen viewport and child connection
    replicated via special internal code, not through normal variable replication
  **/
  public var NetPlayerIndex : unreal.UInt8;
  
  /**
    True if PlayerController is currently waiting for the match to start or to respawn. Only valid in Spectating state.
  **/
  public var bPlayerIsWaiting : Bool;
  public var ActiveForceFeedbackEffects : unreal.TArray<unreal.FActiveForceFeedbackEffect>;
  
  /**
    Object that manages player input.
  **/
  public var PlayerInput : unreal.UPlayerInput;
  
  /**
    class of my CheatManager.
  **/
  public var CheatClass : unreal.TSubclassOf<unreal.UCheatManager>;
  
  /**
    Object that manages "cheat" commands.  Not instantiated in shipping builds.
  **/
  public var CheatManager : unreal.UCheatManager;
  
  /**
    Cap set by server on bandwidth from client to server in bytes/sec (only has impact if >=2600)
  **/
  public var ClientCap : unreal.Int32;
  
  /**
    Last rotation synced on the server for a spectator.
  **/
  public var LastSpectatorSyncRotation : unreal.FRotator;
  
  /**
    Last location synced on the server for a spectator.
  **/
  public var LastSpectatorSyncLocation : unreal.FVector;
  
  /**
    Used to make sure the client is kept synchronized when in a spectator state
  **/
  public var LastSpectatorStateSynchTime : unreal.Float32;
  
  /**
    The actors which the camera shouldn't see - e.g. used to hide actors which the camera penetrates
  **/
  public var HiddenActors : unreal.TArray<unreal.AActor>;
  
  /**
    Used to replicate the view rotation of targets not owned/possessed by this PlayerController.
  **/
  public var TargetViewRotation : unreal.FRotator;
  
  /**
    True to allow this player controller to manage the camera target for you,
    typically by using the possessed pawn as the camera target. Set to false
    if you want to manually control the camera target.
  **/
  public var bAutoManageActiveCameraTarget : Bool;
  
  /**
    PlayerCamera class should be set for each game, otherwise Engine.PlayerCameraManager is used
  **/
  public var PlayerCameraManagerClass : unreal.TSubclassOf<unreal.APlayerCameraManager>;
  
  /**
    Camera manager associated with this Player Controller.
  **/
  public var PlayerCameraManager : unreal.APlayerCameraManager;
  
  /**
    Heads up display associated with this PlayerController.
  **/
  public var MyHUD : unreal.AHUD;
  
  /**
    Director track that's currently possessing this player controller, or none if not possessed.
  **/
  public var ControllingDirTrackInst : unreal.UInterpTrackInstDirector;
  
  /**
    Used in net games so client can acknowledge it possessed a specific pawn.
  **/
  public var AcknowledgedPawn : unreal.APawn;
  
  /**
    UPlayer associated with this PlayerController.  Could be a local player or a net connection.
  **/
  public var Player : unreal.UPlayer;
  
}
