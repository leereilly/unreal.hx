/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  MovementComponent is an abstract component class that defines functionality for moving a PrimitiveComponent (our UpdatedComponent) each tick.
  Base functionality includes:
     - Restricting movement to a plane or axis.
     - Utility functions for special handling of collision results (SlideAlongSurface(), ComputeSlideVector(), TwoWallAdjust()).
     - Utility functions for moving when there may be initial penetration (SafeMoveUpdatedComponent(), ResolvePenetration()).
     - Automatically registering the component tick and finding a component to move on the owning Actor.
  Normally the root component of the owning actor is moved, however another component may be selected (see SetUpdatedComponent()).
  During swept (non-teleporting) movement only collision of UpdatedComponent is considered, attached components will teleport to the end location ignoring collision.
**/
@:glueCppIncludes("GameFramework/MovementComponent.h")
@:uextern extern class UMovementComponent extends unreal.UActorComponent {
  
  /**
    If true, registers the owner's Root component as the UpdatedComponent if there is not one currently assigned.
  **/
  public var bAutoRegisterUpdatedComponent : Bool;
  
  /**
    If true, whenever the updated component is changed, this component will enable or disable its tick dependent on whether it has something to update.
    This will NOT enable tick at startup if bAutoActivate is false, because presumably you have a good reason for not wanting it to start ticking initially.
  **/
  public var bAutoUpdateTickRegistration : Bool;
  
  /**
    If true, skips TickComponent() if UpdatedComponent was not recently rendered.
  **/
  public var bUpdateOnlyIfRendered : Bool;
  
  /**
    The origin of the plane that constrains movement, if plane constraint is enabled.
    This defines the behavior of snapping a position to the plane, such as by SnapUpdatedComponentToPlane().
    @see bConstrainToPlane, SetPlaneConstraintOrigin().
  **/
  private var PlaneConstraintOrigin : unreal.FVector;
  
  /**
    The normal or axis of the plane that constrains movement, if bConstrainToPlane is enabled.
    If for example you wanted to constrain movement to the X-Z plane (so that Y cannot change), the normal would be set to X=0 Y=1 Z=0.
    This is recalculated whenever PlaneConstraintAxisSetting changes.
    @see bConstrainToPlane, SetPlaneConstraintNormal(), SetPlaneConstraintFromVectors()
  **/
  private var PlaneConstraintNormal : unreal.FVector;
  
  /**
    If true and plane constraints are enabled, then the updated component will be snapped to the plane when first attached.
  **/
  public var bSnapToPlaneAtStart : Bool;
  
  /**
    If true, movement will be constrained to a plane.
    @see PlaneConstraintNormal, PlaneConstraintOrigin, PlaneConstraintAxisSetting
  **/
  public var bConstrainToPlane : Bool;
  
  /**
    Current velocity of updated component.
  **/
  public var Velocity : unreal.FVector;
  
  /**
    UpdatedComponent, cast as a UPrimitiveComponent. May be invalid if UpdatedComponent was null or not a UPrimitiveComponent.
  **/
  public var UpdatedPrimitive : unreal.UPrimitiveComponent;
  
  /**
    The component we move and update.
    If this is null at startup and bAutoRegisterUpdatedComponent is true, the owning Actor's root component will automatically be set as our UpdatedComponent at startup.
    @see bAutoRegisterUpdatedComponent, SetUpdatedComponent(), UpdatedPrimitive
  **/
  public var UpdatedComponent : unreal.USceneComponent;
  
}
