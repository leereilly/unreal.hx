/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Components/SkyLightComponent.h")
@:uextern extern class USkyLightComponent extends unreal.ULightComponentBase {
  private var BlendDestinationCubemap : unreal.UTextureCube;
  
  /**
    Tint color on occluded areas, artistic control.
  **/
  public var OcclusionTint : unreal.FColor;
  
  /**
    Controls the darkest that a fully occluded area can get.
  **/
  public var MinOcclusion : unreal.Float32;
  
  /**
    Contrast S-curve applied to the computed AO.  A value of 0 means no contrast increase, 1 is a significant contrast increase.
  **/
  public var Contrast : unreal.Float32;
  
  /**
    Max distance that the occlusion of one point will affect another.
    Higher values increase the cost of Distance Field AO exponentially.
  **/
  public var OcclusionMaxDistance : unreal.Float32;
  
  /**
    Whether all distant lighting from the lower hemisphere should be set to zero.
    Enabling this is accurate when lighting a scene on a planet,
    However disabling it can be useful to approximate skylight bounce lighting (eg Movable light).
  **/
  public var bLowerHemisphereIsBlack : Bool;
  
  /**
    Distance from the sky light at which any geometry should be treated as part of the sky.
    This is also used by reflection captures, so update reflection captures to see the impact.
  **/
  public var SkyDistanceThreshold : unreal.Float32;
  
  /**
    Cubemap to use for sky lighting if SourceType is set to SLS_SpecifiedCubemap.
  **/
  public var Cubemap : unreal.UTextureCube;
  
  /**
    Indicates where to get the light contribution from.
  **/
  public var SourceType : unreal.ESkyLightSourceType;
  
}
