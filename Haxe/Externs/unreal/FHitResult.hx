/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  Structure containing information about one hit of a trace, such as point of impact and surface normal at that point.
**/
@:glueCppIncludes("GameFramework/CharacterMovementComponent.h")
@:uextern extern class FHitResult {
  
  /**
    Face index we hit (for complex hits with triangle meshes).
  **/
  public var FaceIndex : unreal.Int32;
  
  /**
    Name of bone we hit (for skeletal meshes).
  **/
  public var BoneName : unreal.FName;
  
  /**
    Extra data about item that was hit (hit primitive specific).
  **/
  public var Item : unreal.Int32;
  
  /**
    If this test started in penetration (bStartPenetrating is true) and a depenetration vector can be computed,
    this value is the distance along Normal that will result in moving out of penetration.
    If the distance cannot be computed, this distance will be zero.
  **/
  public var PenetrationDepth : unreal.Float32;
  
  /**
    The distance from the TraceStart to the ImpactPoint in world space. This value is 0 if there was an initial overlap (trace started inside another colliding object).
  **/
  public var Distance : unreal.Float32;
  
  /**
    'Time' of impact along trace direction (ranging from 0.0 to 1.0) if there is a hit, indicating time between TraceStart and TraceEnd.
    For swept movement (but not queries) this may be pulled back slightly from the actual time of impact, to prevent precision problems with adjacent geometry.
  **/
  public var Time : unreal.Float32;
  
  /**
    Whether the trace started in penetration, i.e. with an initial blocking overlap.
    In the case of penetration, if PenetrationDepth > 0.f, then it will represent the distance along the Normal vector that will result in
    minimal contact between the swept shape and the object that was hit. In this case, ImpactNormal will be the normal opposed to movement at that location
    (ie, Normal may not equal ImpactNormal).
  **/
  public var bStartPenetrating : Bool;
  
  /**
    Indicates if this hit was a result of blocking collision. If false, there was no hit or it was an overlap/touch instead.
  **/
  public var bBlockingHit : Bool;
  
}
