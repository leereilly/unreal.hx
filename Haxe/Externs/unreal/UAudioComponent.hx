/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  AudioComponent is used to play a Sound
  
  @see https://docs.unrealengine.com/latest/INT/Audio/Overview/index.html
  @see USoundBase
**/
@:glueCppIncludes("Components/AudioComponent.h", "Engine.h")
@:uextern extern class UAudioComponent extends unreal.USceneComponent {
  
  /**
    If bOverrideSettings is true, the attenuation properties to use for sounds generated by this component
  **/
  public var AttenuationOverrides : unreal.FAttenuationSettings;
  
  /**
    If bOverrideSettings is false, the asset to use to determine attenuation properties for sounds generated by this component
  **/
  public var AttenuationSettings : unreal.USoundAttenuation;
  
  /**
    A multiplier to apply to the high frequency gain for sounds generated by this component
  **/
  public var HighFrequencyGainMultiplier : unreal.Float32;
  
  /**
    A pitch multiplier to apply to sounds generated by this component
  **/
  public var PitchMultiplier : unreal.Float32;
  
  /**
    A volume multiplier to apply to sounds generated by this component
  **/
  public var VolumeMultiplier : unreal.Float32;
  
  /**
    The upper bound to use when randomly determining a volume multiplier
  **/
  public var VolumeModulationMax : unreal.Float32;
  
  /**
    The lower bound to use when randomly determining a volume multiplier
  **/
  public var VolumeModulationMin : unreal.Float32;
  
  /**
    The upper bound to use when randomly determining a pitch multiplier
  **/
  public var PitchModulationMax : unreal.Float32;
  
  /**
    The lower bound to use when randomly determining a pitch multiplier
  **/
  public var PitchModulationMin : unreal.Float32;
  
  /**
    Whether or not this sound plays when the game is paused in the UI
  **/
  public var bIsUISound : Bool;
  
  /**
    Should the Attenuation Settings asset be used (false) or should the properties set directly on the component be used for attenuation properties
  **/
  public var bOverrideAttenuation : Bool;
  
  /**
    Is this audio component allowed to be spatialized?
  **/
  public var bAllowSpatialization : Bool;
  
  /**
    Whether the wave instances should remain active if they're dropped by the prioritization code. Useful for e.g. vehicle sounds that shouldn't cut out.
  **/
  public var bShouldRemainActiveIfDropped : Bool;
  
  /**
    Stop sound when owner is destroyed
  **/
  public var bStopWhenOwnerDestroyed : Bool;
  
  /**
    Auto destroy this component on completion
  **/
  public var bAutoDestroy : Bool;
  
  /**
    Optional sound group this AudioComponent belongs to
  **/
  public var SoundClassOverride : unreal.USoundClass;
  
  /**
    Array of per-instance parameters for this AudioComponent.
  **/
  public var InstanceParameters : unreal.TArray<unreal.FAudioComponentParam>;
  
  /**
    The sound to be played
  **/
  public var Sound : unreal.USoundBase;
  
}
