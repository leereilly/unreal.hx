/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  Pawn is the base class of all actors that can be possessed by players or AI.
  They are the physical representations of players and creatures in a level.
  
  @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Pawn/
**/
@:glueCppIncludes("GameFramework/Pawn.h")
@:uextern extern class APawn extends unreal.AActor implements unreal.INavAgentInterface {
  
  /**
    The last control input vector that was processed by ConsumeMovementInputVector().
    @see GetLastMovementInputVector()
  **/
  private var LastControlInputVector : unreal.FVector;
  
  /**
    Accumulated control input vector, stored in world space. This is the pending input, which is cleared (zeroed) once consumed.
    @see GetPendingMovementInputVector(), AddMovementInput()
  **/
  private var ControlInputVector : unreal.FVector;
  
  /**
    Controller currently possessing this Actor
  **/
  public var Controller : unreal.AController;
  
  /**
    Controller of the last Actor that caused us damage.
  **/
  public var LastHitBy : unreal.AController;
  
  /**
    Replicated so we can see where remote clients are looking.
  **/
  public var RemoteViewPitch : unreal.UInt8;
  
  /**
    If Pawn is possessed by a player, points to his playerstate.  Needed for network play as controllers are not replicated to clients.
  **/
  public var PlayerState : unreal.APlayerState;
  
  /**
    Default class to use when pawn is controlled by AI.
  **/
  public var AIControllerClass : unreal.TSubclassOf<unreal.AController>;
  
  /**
    Determines when the Pawn creates and is possessed by an AI Controller (on level start, when spawned, etc).
    Only possible if AIControllerClass is set, and ignored if AutoPossessPlayer is enabled.
    @see AutoPossessPlayer
  **/
  public var AutoPossessAI : unreal.EAutoPossessAI;
  
  /**
    Determines which PlayerController, if any, should automatically possess the pawn when the level starts or when the pawn is spawned.
    @see AutoPossessAI
  **/
  public var AutoPossessPlayer : unreal.EAutoReceiveInput;
  
  /**
    Base eye height above collision center.
  **/
  public var BaseEyeHeight : unreal.Float32;
  
  /**
    If set to false (default) given pawn instance will never affect navigation generation.
        Setting it to true will result in using regular AActor's navigation relevancy
        calculation to check if this pawn instance should affect navigation generation
        Use SetCanAffectNavigationGeneration to change this value at runtime.
        Note that modifying this value at runtime will result in any navigation change only if runtime navigation generation is enabled.
  **/
  public var bCanAffectNavigationGeneration : Bool;
  
  /**
    If true, this Pawn's roll will be updated to match the Controller's ControlRotation roll, if controlled by a PlayerController.
  **/
  public var bUseControllerRotationRoll : Bool;
  
  /**
    If true, this Pawn's yaw will be updated to match the Controller's ControlRotation yaw, if controlled by a PlayerController.
  **/
  public var bUseControllerRotationYaw : Bool;
  
  /**
    If true, this Pawn's pitch will be updated to match the Controller's ControlRotation pitch, if controlled by a PlayerController.
  **/
  public var bUseControllerRotationPitch : Bool;
  
}
