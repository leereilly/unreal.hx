/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  A PlayerCameraManager is responsible for managing the camera for a particular
  player. It defines the final view properties used by other systems (e.g. the renderer),
  meaning you can think of it as your virtual eyeball in the world. It can compute the
  final camera properties directly, or it can arbitrate/blend between other objects or
  actors that influence the camera (e.g. blending from one CameraActor to another).
  
  The PlayerCameraManagers primary external responsibility is to reliably respond to
  various Get*() functions, such as GetCameraViewPoint. Most everything else is
  implementation detail and overrideable by user projects.
  
  By default, a PlayerCameraManager maintains a "view target", which is the primary actor
  the camera is associated with. It can also apply various "post" effects to the final
  view state, such as camera animations, shakes, post-process effects or special
  effects such as dirt on the lens.
  
  @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Camera/
**/
@:glueCppIncludes("Camera/PlayerCameraManager.h", "Engine.h")
@:uextern extern class APlayerCameraManager extends unreal.AActor {
  
  /**
    Maximum view roll, in degrees.
  **/
  public var ViewRollMax : unreal.Float32;
  
  /**
    Minimum view roll, in degrees.
  **/
  public var ViewRollMin : unreal.Float32;
  
  /**
    Maximum view yaw, in degrees.
  **/
  public var ViewYawMax : unreal.Float32;
  
  /**
    Minimum view yaw, in degrees.
  **/
  public var ViewYawMin : unreal.Float32;
  
  /**
    Maximum view pitch, in degrees.
  **/
  public var ViewPitchMax : unreal.Float32;
  
  /**
    Minimum view pitch, in degrees.
  **/
  public var ViewPitchMin : unreal.Float32;
  
  /**
    True if camera's orientation should be updated by most recent HMD orientation.
  **/
  public var bFollowHmdOrientation : Bool;
  
  /**
    True if server will use camera positions replicated from the client instead of calculating them locally.
  **/
  public var bUseClientSideCameraUpdates : Bool;
  
  /**
    True when this camera should use an orthographic perspective instead of FOV
  **/
  public var bIsOrthographic : Bool;
  
  /**
    Internal. Receives the output of individual camera animations.
  **/
  private var AnimCameraActor : unreal.ACameraActor;
  
  /**
    Array of camera anim instances that are not playing and available to be used.
  **/
  private var FreeAnims : unreal.TArray<unreal.UCameraAnimInst>;
  
  /**
    Array of camera anim instances that are currently playing and in-use
  **/
  public var ActiveAnims : unreal.TArray<unreal.UCameraAnimInst>;
  
  /**
    Internal list of active post process effects. Parallel array to PostProcessBlendCacheWeights.
  **/
  private var PostProcessBlendCache : unreal.TArray<unreal.FPostProcessSettings>;
  
  /**
    Cached ref to modifier for code-driven screen shakes
  **/
  private var CachedCameraShakeMod : unreal.UCameraModifier_CameraShake;
  
  /**
    CameraBlood emitter attached to this camera
  **/
  private var CameraLensEffects : unreal.TArray<unreal.AEmitterCameraLensEffectBase>;
  
  /**
    Offset to view target (used in certain CameraStyles)
  **/
  public var ViewTargetOffset : unreal.FVector;
  
  /**
    Offset to Z free camera position (used in certain CameraStyles)
  **/
  public var FreeCamOffset : unreal.FVector;
  
  /**
    Distance to place free camera from view target (used in certain CameraStyles)
  **/
  public var FreeCamDistance : unreal.Float32;
  
  /**
    List of modifiers to create by default for this camera
  **/
  public var DefaultModifiers : unreal.TArray<unreal.TSubclassOf<unreal.UCameraModifier>>;
  
  /**
    List of active camera modifier instances that have a chance to update the final camera POV
  **/
  private var ModifierList : unreal.TArray<unreal.UCameraModifier>;
  
  /**
    Pending view target for blending
  **/
  public var PendingViewTarget : unreal.FTViewTarget;
  
  /**
    Current ViewTarget
  **/
  public var ViewTarget : unreal.FTViewTarget;
  
  /**
    Cached camera properties, one frame old.
  **/
  public var LastFrameCameraCache : unreal.FCameraCacheEntry;
  
  /**
    Cached camera properties.
  **/
  public var CameraCache : unreal.FCameraCacheEntry;
  
  /**
    Default aspect ratio
  **/
  public var DefaultAspectRatio : unreal.Float32;
  
  /**
    The default desired width (in world units) of the orthographic view (ignored in Perspective mode)
  **/
  public var DefaultOrthoWidth : unreal.Float32;
  
  /**
    FOV to use by default.
  **/
  public var DefaultFOV : unreal.Float32;
  public var TransformComponent : unreal.USceneComponent;
  
  /**
    PlayerController that owns this Camera actor
  **/
  public var PCOwner : unreal.APlayerController;
  
}
