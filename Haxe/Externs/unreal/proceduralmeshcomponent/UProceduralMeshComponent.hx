/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.proceduralmeshcomponent;


/**
  Component that allows you to specify custom triangle mesh geometry
  Beware! This feature is experimental and may be substantially changed in future releases.
**/
@:umodule("ProceduralMeshComponent")
@:glueCppIncludes("ProceduralMeshComponent.h")
@:uextern extern class UProceduralMeshComponent extends unreal.UMeshComponent {
  
  /**
    Create/replace a section for this procedural mesh component.
    @param  SectionIndex            Index of the section to create or replace.
    @param  Vertices                        Vertex buffer of all vertex positions to use for this mesh section.
    @param  Triangles                       Index buffer indicating which vertices make up each triangle. Length must be a multiple of 3.
    @param  Normals                         Optional array of normal vectors for each vertex. If supplied, must be same length as Vertices array.
    @param  UV0                                     Optional array of texture co-ordinates for each vertex. If supplied, must be same length as Vertices array.
    @param  VertexColors            Optional array of colors for each vertex. If supplied, must be same length as Vertices array.
    @param  Tangents                        Optional array of tangent vector for each vertex. If supplied, must be same length as Vertices array.
    @param  bCreateCollision        Indicates whether collision should be created for this section. This adds significant cost.
  **/
  @:final public function CreateMeshSection(SectionIndex : unreal.Int32, Vertices : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector>>>, Triangles : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, Normals : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector>>>, UV0 : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector2D>>>, VertexColors : unreal.Const<unreal.PRef<unreal.TArray<unreal.FColor>>>, Tangents : unreal.Const<unreal.PRef<unreal.TArray<unreal.proceduralmeshcomponent.FProcMeshTangent>>>, bCreateCollision : Bool) : Void;
  
  /**
    Updates a section of this procedural mesh component. This is faster than CreateMeshSection, but does not let you change topology. Collision info is also updated.
    @param  Vertices                        Vertex buffer of all vertex positions to use for this mesh section.
    @param  Normals                         Optional array of normal vectors for each vertex. If supplied, must be same length as Vertices array.
    @param  UV0                                     Optional array of texture co-ordinates for each vertex. If supplied, must be same length as Vertices array.
    @param  VertexColors            Optional array of colors for each vertex. If supplied, must be same length as Vertices array.
    @param  Tangents                        Optional array of tangent vector for each vertex. If supplied, must be same length as Vertices array.
  **/
  @:final public function UpdateMeshSection(SectionIndex : unreal.Int32, Vertices : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector>>>, Normals : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector>>>, UV0 : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector2D>>>, VertexColors : unreal.Const<unreal.PRef<unreal.TArray<unreal.FColor>>>, Tangents : unreal.Const<unreal.PRef<unreal.TArray<unreal.proceduralmeshcomponent.FProcMeshTangent>>>) : Void;
  
  /**
    Clear a section of the procedural mesh. Other sections do not change index.
  **/
  @:final public function ClearMeshSection(SectionIndex : unreal.Int32) : Void;
  
  /**
    Clear all mesh sections and reset to empty state
  **/
  @:final public function ClearAllMeshSections() : Void;
  
  /**
    Control visibility of a particular section
  **/
  @:final public function SetMeshSectionVisible(SectionIndex : unreal.Int32, bNewVisibility : Bool) : Void;
  
  /**
    Returns whether a particular section is currently visible
  **/
  @:thisConst @:final public function IsMeshSectionVisible(SectionIndex : unreal.Int32) : Bool;
  
  /**
    Collision data
  **/
  public var ProcMeshBodySetup : unreal.UBodySetup;
  // Interface_CollisionDataProvider interface implementation
  
}
