/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.proceduralmeshcomponent;

@:umodule("ProceduralMeshComponent")
@:glueCppIncludes("KismetProceduralMeshLibrary.h")
@:uextern extern class UKismetProceduralMeshLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Generate vertex and index buffer for a simple box, given the supplied dimensions. Normals, UVs and tangents are also generated for each vertex.
  **/
  static public function GenerateBoxMesh(BoxRadius : unreal.FVector, Vertices : unreal.PRef<unreal.TArray<unreal.FVector>>, Triangles : unreal.PRef<unreal.TArray<unreal.Int32>>, Normals : unreal.PRef<unreal.TArray<unreal.FVector>>, UVs : unreal.PRef<unreal.TArray<unreal.FVector2D>>, Tangents : unreal.PRef<unreal.TArray<unreal.proceduralmeshcomponent.FProcMeshTangent>>) : Void;
  
  /**
    Automatically generate normals and tangent vectors for a mesh
    UVs are required for correct tangent generation.
  **/
  static public function CalculateTangentsForMesh(Vertices : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector>>>, Triangles : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>, UVs : unreal.Const<unreal.PRef<unreal.TArray<unreal.FVector2D>>>, Normals : unreal.PRef<unreal.TArray<unreal.FVector>>, Tangents : unreal.PRef<unreal.TArray<unreal.proceduralmeshcomponent.FProcMeshTangent>>) : Void;
  
  /**
    Add a quad, specified by four indices, to a triangle index buffer as two triangles.
  **/
  static public function ConvertQuadToTriangles(Triangles : unreal.PRef<unreal.TArray<unreal.Int32>>, Vert0 : unreal.Int32, Vert1 : unreal.Int32, Vert2 : unreal.Int32, Vert3 : unreal.Int32) : Void;
  
  /**
    Generate an index buffer for a grid of quads.
    @param  NumX                    Number of vertices in X direction (must be >= 2)
    @param  NumY                    Number of vertices in y direction (must be >= 2)
    @param  bWinding                Reverses winding of indices generated for each quad
    @out    Triangles               Output index buffer
  **/
  static public function CreateGridMeshTriangles(NumX : unreal.Int32, NumY : unreal.Int32, bWinding : Bool, Triangles : unreal.PRef<unreal.TArray<unreal.Int32>>) : Void;
  
}
