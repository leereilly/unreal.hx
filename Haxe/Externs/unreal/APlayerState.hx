/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  A PlayerState is created for every player on a server (or in a standalone game).
  PlayerStates are replicated to all clients, and contain network game relevant information about the player, such as playername, score, etc.
**/
@:glueCppIncludes("GameFramework/PlayerState.h")
@:uextern extern class APlayerState extends unreal.AInfo {
  
  /**
    The id used by the network to uniquely identify a player.
    NOTE: the internals of this property should *never* be exposed to the player as it's transient
    and opaque in meaning (ie it might mean date/time followed by something else).
    It is OK to use and pass around this property, though.
  **/
  public var UniqueId : unreal.FUniqueNetIdRepl;
  
  /**
    This is used for sending game agnostic messages that can be localized
  **/
  public var EngineMessageClass : unreal.TSubclassOf<unreal.ULocalMessage>;
  
  /**
    Elapsed time on server when this PlayerState was first created.
  **/
  public var StartTime : unreal.Int32;
  
  /**
    indicates this is a PlayerState from the previous level of a seamless travel,
    waiting for the player to finish the transition before creating a new one
    this is used to avoid preserving the PlayerState in the InactivePlayerArray if the player leaves
  **/
  public var bFromPreviousLevel : Bool;
  
  /**
    Means this PlayerState came from the GameMode's InactivePlayerArray
  **/
  public var bIsInactive : Bool;
  
  /**
    True if this PlayerState is associated with an AIController
  **/
  public var bIsABot : Bool;
  
  /**
    Whether this player can only ever be a spectator
  **/
  public var bOnlySpectator : Bool;
  
  /**
    Whether this player is currently a spectator
  **/
  public var bIsSpectator : Bool;
  
  /**
    Unique net id number. Actual value varies based on current online subsystem, use it only as a guaranteed unique number per player.
  **/
  public var PlayerId : unreal.Int32;
  
  /**
    Player name, or blank if none.
  **/
  public var PlayerName : unreal.FString;
  
  /**
    Replicated compressed ping for this player (holds ping in msec divided by 4)
  **/
  public var Ping : unreal.UInt8;
  
  /**
    Player's current score.
  **/
  public var Score : unreal.Float32;
  
}
