/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  Container for a physics representation of an object.
**/
@:glueCppIncludes("PhysicsEngine/PhysicsConstraintTemplate.h", "Engine.h")
@:uextern extern class FConstraintInstance {
  @:uname('new') public static function create():PHaxeCreated<unreal.FConstraintInstance>;
  
  /**
    Limit to the force the angular drive can apply.
  **/
  public var AngularDriveForceLimit : unreal.Float32;
  
  /**
    Damping value to apply to the for angular drive.
  **/
  public var AngularDriveDamping : unreal.Float32;
  
  /**
    Spring value to apply to the for angular drive.
  **/
  public var AngularDriveSpring : unreal.Float32;
  
  /**
    Target velocity for the angular drive.
  **/
  public var AngularVelocityTarget : unreal.FVector;
  
  /**
    Target orientation for the angular drive.
  **/
  public var AngularOrientationTarget : unreal.FRotator;
  
  /**
    The way rotation paths are estimated
  **/
  public var AngularDriveMode : unreal.EAngularDriveMode;
  public var AngularPositionTarget_DEPRECATED : unreal.FQuat;
  
  /**
    Enables the angular drive towards a target velocity.
  **/
  public var bAngularVelocityDrive : Bool;
  
  /**
    Enables the angular drive towards a target orientation.
  **/
  public var bAngularOrientationDrive : Bool;
  public var bAngularSlerpDrive_DEPRECATED : Bool;
  public var bTwistVelocityDrive_DEPRECATED : Bool;
  public var bTwistPositionDrive_DEPRECATED : Bool;
  public var bSwingVelocityDrive_DEPRECATED : Bool;
  public var bSwingPositionDrive_DEPRECATED : Bool;
  
  /**
    Limit to the force the linear drive can apply.
  **/
  public var LinearDriveForceLimit : unreal.Float32;
  
  /**
    Damping to apply to the for linear drive.
  **/
  public var LinearDriveDamping : unreal.Float32;
  
  /**
    Spring to apply to the for linear drive.
  **/
  public var LinearDriveSpring : unreal.Float32;
  
  /**
    Target velocity the linear drive.
  **/
  public var LinearVelocityTarget : unreal.FVector;
  
  /**
    Target position the linear drive. Only the components that are enabled are used.
  **/
  public var LinearPositionTarget : unreal.FVector;
  
  /**
    Enables/Disables linear velocity drive.
  **/
  public var bLinearVelocityDrive : Bool;
  
  /**
    Enables/Disables linear position drive.
  **/
  public var bLinearPositionDrive : Bool;
  
  /**
    Angular force needed to break the joint.
  **/
  public var AngularBreakThreshold : unreal.Float32;
  
  /**
    Whether it is possible to break the joint with angular force.
  **/
  public var bAngularBreakable : Bool;
  
  /**
    Specifies the angular offset between the two frames of reference. By default limit goes from (-Angle, +Angle)
    This allows you to bias the limit for swing1 swing2 and twist.
  **/
  public var AngularRotationOffset : unreal.FRotator;
  
  /**
    Damping of the twist limit constraint if soft limit is used for twist motions.
  **/
  public var TwistLimitDamping : unreal.Float32;
  
  /**
    Stiffness of the twist limit constraint if soft limit is used for twist motions.
  **/
  public var TwistLimitStiffness : unreal.Float32;
  
  /**
    Damping of the swing limit constraint if soft limit is used for swing motions.
  **/
  public var SwingLimitDamping : unreal.Float32;
  
  /**
    Stiffness of the swing limit constraint if soft limit is used for swing motions.
  **/
  public var SwingLimitStiffness : unreal.Float32;
  
  /**
    Used if swing motion along the z axis is limited. The limit angle is specified in degrees and should be
          between 0 and 180.
  **/
  public var Swing2LimitAngle : unreal.Float32;
  
  /**
    Used if twist motion along the x axis is limited. The limit angle is specified in degrees and should be
                  between 0 and 180.
  **/
  public var TwistLimitAngle : unreal.Float32;
  
  /**
    Used if swing motion along the y axis is limited. The limit angle is specified in degrees and should be
                  between 0 and 180.
  **/
  public var Swing1LimitAngle : unreal.Float32;
  
  /**
    Whether we want to use soft limits for twist motions instead of hard limits. With enabled
                  soft limit, a constraint is used instead of hard-capping the motion.
  **/
  public var bTwistLimitSoft : Bool;
  
  /**
    Whether we want to use soft limits for swing motions instead of hard limits. With enabled
                  soft limit, a constraint is used instead of hard-capping the motion.
  **/
  public var bSwingLimitSoft : Bool;
  
  /**
    Indicates whether rotation about the Y axis is allowed, blocked, or limited. If limited, the
                  AngularLimit property will be used to determine the range of motion. See EAngularConstraintMotion.
  **/
  public var AngularSwing2Motion : unreal.EAngularConstraintMotion;
  
  /**
    Indicates whether rotation about the the X axis is allowed, blocked, or limited. If limited, the
                  AngularLimit property will be used to determine the range of motion. See EAngularConstraintMotion.
  **/
  public var AngularTwistMotion : unreal.EAngularConstraintMotion;
  
  /**
    Indicates whether rotation about the Z axis is allowed, blocked, or limited. If limited, the
                  AngularLimit property will be used to determine the range of motion. See EAngularConstraintMotion.
  **/
  public var AngularSwing1Motion : unreal.EAngularConstraintMotion;
  
  /**
    Force needed to break the joint.
  **/
  public var LinearBreakThreshold : unreal.Float32;
  
  /**
    Defines whether the joint is breakable or not.
  **/
  public var bLinearBreakable : Bool;
  
  /**
    Damping of the linear soft limit constraint. Only used, when bLinearLimitSoft is true.
  **/
  public var LinearLimitDamping : unreal.Float32;
  
  /**
    Stiffness of the linear soft limit constraint. Only used, when bLinearLimitSoft is true.
  **/
  public var LinearLimitStiffness : unreal.Float32;
  
  /**
    Whether we want to use soft limits instead of hard limits. With enabled soft limit, a constraint is used
                  instead of hard-capping the motion.
  **/
  public var bLinearLimitSoft : Bool;
  
  /**
    The limiting extent in world untis of the linear motion for limitied motion axes.
  **/
  public var LinearLimitSize : unreal.Float32;
  
  /**
    Indicates whether linear motion along the z axis is allowed, blocked or limited. If limited, the LinearLimit property will be used
                  to determine if a motion is allowed. See ELinearConstraintMotion.
  **/
  public var LinearZMotion : unreal.ELinearConstraintMotion;
  
  /**
    Indicates whether linear motion along the y axis is allowed, blocked or limited. If limited, the LinearLimit property will be used
                  to determine if a motion is allowed. See ELinearConstraintMotion.
  **/
  public var LinearYMotion : unreal.ELinearConstraintMotion;
  
  /**
    Indicates whether linear motion along the x axis is allowed, blocked or limited. If limited, the LinearLimit property will be used
                  to determine if a motion is allowed. See ELinearConstraintMotion.
  **/
  public var LinearXMotion : unreal.ELinearConstraintMotion;
  
  /**
    Angular tolerance value in world units. If the distance error exceeds this tolarance limit, the body will be projected.
  **/
  public var ProjectionAngularTolerance : unreal.Float32;
  
  /**
    Linear tolerance value in world units. If the distance error exceeds this tolarance limit, the body will be projected.
  **/
  public var ProjectionLinearTolerance : unreal.Float32;
  
  /**
    If distance error between bodies exceeds 0.1 units, or rotation error exceeds 10 degrees, body will be projected to fix this.
    For example a chain spinning too fast will have its elements appear detached due to velocity, this will project all bodies so they still appear attached to each other.
  **/
  public var bEnableProjection : Bool;
  
  /**
    Disable collision between bodies joined by this constraint.
  **/
  public var bDisableCollision : Bool;
  
  /**
    Seconday axis in Body2 reference frame. Orthogonal to PriAxis2.
  **/
  public var SecAxis2 : unreal.FVector;
  
  /**
    Primary (twist) axis in Body2 reference frame.
  **/
  public var PriAxis2 : unreal.FVector;
  
  /**
    Location of constraint in Body2 reference frame.
  **/
  public var Pos2 : unreal.FVector;
  
  /**
    Seconday axis in Body1 reference frame. Orthogonal to PriAxis1.
  **/
  public var SecAxis1 : unreal.FVector;
  
  /**
    Primary (twist) axis in Body1 reference frame.
  **/
  public var PriAxis1 : unreal.FVector;
  
  /**
    Location of constraint in Body1 reference frame.
  **/
  public var Pos1 : unreal.FVector;
  
  /**
    Name of second bone (body) that this constraint is connecting.
    This will be the 'parent' bone in a PhysicsAset.
  **/
  public var ConstraintBone2 : unreal.FName;
  
  /**
    Name of first bone (body) that this constraint is connecting.
    This will be the 'child' bone in a PhysicsAsset.
  **/
  public var ConstraintBone1 : unreal.FName;
  
  /**
    Name of bone that this joint is associated with.
  **/
  public var JointName : unreal.FName;
  
  /**
    The component that created this instance.
  **/
  public var OwnerComponent : unreal.USceneComponent;
  
}
