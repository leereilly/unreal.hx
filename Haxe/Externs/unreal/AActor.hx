/**
  This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
  In order to add more definitions, create or edit a type with the same name/package, but with a `_Extra` suffix
**/
package unreal;


/**
  Actor is the base class for an Object that can be placed or spawned in a level.
  Actors may contain a collection of ActorComponents, which can be used to control how actors move, how they are rendered, etc.
  The other main function of an Actor is the replication of properties and function calls across the network during play.
  
  @see https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Actors/
  @see UActorComponent
**/
@:glueCppIncludes("GameFramework/Actor.h", "Engine.h")
@:uextern extern class AActor extends unreal.UObject {
  
  /**
    Array of ActorComponents that are created by blueprints and serialized per-instance.
  **/
  public var BlueprintCreatedComponents : unreal.TArray<unreal.UActorComponent>;
  
  /**
    Bitflag to represent which views this actor is hidden in, via per-view layer visibility.
  **/
  public var HiddenEditorViews : unreal.FakeUInt64;
  
  /**
    Array of tags that can be used for grouping and categorizing.
  **/
  public var Tags : unreal.TArray<unreal.FName>;
  
  /**
    If true, and if World setting has bEnableHigerarhicalLOD is true, then it will generate LODActor from groups of clustered Actor
  **/
  public var bEnableAutoLODGeneration : Bool;
  
  /**
    Whether this actor should no be affected by world origin shifting.
  **/
  public var bIgnoresOriginShifting : Bool;
  
  /**
    Indicates the actor was pulled through a seamless travel.
  **/
  public var bActorSeamlessTraveled : Bool;
  #if WITH_EDITORONLY_DATA
  
  /**
    The scale to apply to any billboard components in editor builds (happens in any WITH_EDITOR build, including non-cooked games).
  **/
  public var SpriteScale : unreal.Float32;
  
  /**
    The group this actor is a part of.
  **/
  public var GroupActor : unreal.AActor;
  
  /**
    If true, prevents the actor from being moved in the editor viewport.
  **/
  public var bLockLocation : Bool;
  
  /**
    Whether this actor is hidden by the level browser.
  **/
  public var bHiddenEdLevel : Bool;
  
  /**
    Whether this actor is hidden by the layer browser.
  **/
  public var bHiddenEdLayer : Bool;
  
  /**
    Whether this actor is hidden within the editor viewport.
  **/
  public var bHiddenEd : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Layer's the actor belongs to.  This is outside of the editoronly data to allow hiding of LD-specified layers at runtime for profiling.
  **/
  public var Layers : unreal.TArray<unreal.FName>;
  
  /**
    How long this Actor lives before dying, 0=forever. Note this is the INITIAL value and should not be modified once play has begun.
  **/
  private var InitialLifeSpan : unreal.Float32;
  
  /**
    The matinee actors that control this actor.
  **/
  private var ControllingMatineeActors : unreal.TArray<unreal.AMatineeActor>;
  #if WITH_EDITORONLY_DATA
  
  /**
    Local space pivot offset for the actor
  **/
  private var PivotOffset : unreal.FVector;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Collision primitive that defines the transform (location, rotation, scale) of this Actor.
  **/
  private var RootComponent : unreal.USceneComponent;
  
  /**
    Array of Actors whose Owner is this actor
  **/
  public var Children : unreal.TArray<unreal.AActor>;
  
  /**
    Pawn responsible for damage caused by this actor.
  **/
  public var Instigator : unreal.APawn;
  
  /**
    Controls how to handle spawning this actor in a situation where it's colliding with something else. "Default" means AlwaysSpawn here.
  **/
  public var SpawnCollisionHandlingMethod : unreal.ESpawnActorCollisionHandlingMethod;
  
  /**
    If true, this actor will be replicated to network replays (default is true)
  **/
  public var bRelevantForNetworkReplays : Bool;
  
  /**
    If true, this actor should search for an owned camera component to view through when used as a view target.
  **/
  public var bFindCameraComponentWhenViewTarget : Bool;
  
  /**
    This actor collides with the world when placing in the editor, even if RootComponent collision is disabled. Does not affect spawning, @see SpawnCollisionHandlingMethod
  **/
  public var bCollideWhenPlacing : Bool;
  
  /**
    Whether this actor can take damage. Must be true for damage events (e.g. ReceiveDamage()) to be called.
    @see https://www.unrealengine.com/blog/damage-in-ue4
    @see TakeDamage(), ReceiveDamage()
  **/
  public var bCanBeDamaged : Bool;
  
  /**
    If true then destroy self when "finished", meaning all relevant components report that they are done and no timelines or timers are in flight.
  **/
  public var bAutoDestroyWhenFinished : Bool;
  
  /**
    Used to specify the net driver to replicate on (NAME_None || NAME_GameNetDriver is the default net driver)
  **/
  public var NetDriverName : unreal.FName;
  
  /**
    Last time this actor was updated for replication via NetUpdateTime
    @warning: internal net driver time, not related to WorldSettings.TimeSeconds
  **/
  public var LastNetUpdateTime : unreal.Float32;
  
  /**
    Priority for this actor when checking for replication in a low bandwidth or saturated situation, higher priority means it is more likely to replicate
  **/
  public var NetPriority : unreal.Float32;
  
  /**
    How often (per second) this actor will be considered for replication, used to determine NetUpdateTime
  **/
  public var NetUpdateFrequency : unreal.Float32;
  
  /**
    Next time this actor will be considered for replication, set by SetNetUpdateTime()
  **/
  public var NetUpdateTime : unreal.Float32;
  
  /**
    Internal - used by UWorld::ServerTickClients()
  **/
  public var NetTag : unreal.Int32;
  
  /**
    Square of the max distance from the client's viewpoint that this actor is relevant and will be replicated.
  **/
  public var NetCullDistanceSquared : unreal.Float32;
  public var InputConsumeOption_DEPRECATED : unreal.EInputConsumeOptions;
  
  /**
    Component that handles input for this actor, if input is enabled.
  **/
  public var InputComponent : unreal.UInputComponent;
  
  /**
    The priority of this input component when pushed in to the stack.
  **/
  public var InputPriority : unreal.Int32;
  
  /**
    Automatically registers this actor to receive input from a player.
  **/
  public var AutoReceiveInput : unreal.EAutoReceiveInput;
  
  /**
    Describes how much control the local machine has over the actor.
  **/
  public var Role : unreal.ENetRole;
  
  /**
    Used for replicating attachment of this actor's RootComponent to another actor.
  **/
  public var AttachmentReplication : unreal.FRepAttachment;
  
  /**
    Used for replication of our RootComponent's position and velocity
  **/
  public var ReplicatedMovement : unreal.FRepMovement;
  
  /**
    If true, all input on the stack below this actor will not be considered
  **/
  public var bBlockInput : Bool;
  
  /**
    If actor has valid Owner, call Owner's IsNetRelevantFor and GetNetPriority
  **/
  public var bNetUseOwnerRelevancy : Bool;
  
  /**
    This actor will be loaded on network clients during map load
  **/
  public var bNetLoadOnClient : Bool;
  
  /**
    Is this actor still pending a full net update due to clients that weren't able to replicate the actor at the time of LastNetUpdateTime
  **/
  public var bPendingNetUpdate : Bool;
  
  /**
    Whether we have already exchanged Role/RemoteRole on the client, as when removing then re-adding a streaming level.
    Causes all initialization to be performed again even though the actor may not have actually been reloaded.
  **/
  public var bExchangedRoles : Bool;
  
  /**
    If true, this actor is no longer replicated to new clients, and is "torn off" (becomes a ROLE_Authority) on clients to which it was being replicated.
    @see TornOff()
  **/
  public var bTearOff : Bool;
  
  /**
    If true, replicate movement/location related properties.
    Actor must also be set to replicate.
    @see SetReplicates()
    @see https://docs.unrealengine.com/latest/INT/Gameplay/Networking/Replication/
  **/
  public var bReplicateMovement : Bool;
  
  /**
    Always relevant for network (overrides bOnlyRelevantToOwner).
  **/
  public var bAlwaysRelevant : Bool;
  
  /**
    If true, this actor is only relevant to its owner. If this flag is changed during play, all non-owner channels would need to be explicitly closed.
  **/
  public var bOnlyRelevantToOwner : Bool;
  
  /**
    If true, this actor was loaded directly from the map, and for networking purposes can be addressed by its full path name
  **/
  public var bNetStartup : Bool;
  
  /**
    If true, when the actor is spawned it will be sent to the client but receive no further replication updates from the server afterwards.
  **/
  public var bNetTemporary : Bool;
  
  /**
    Allows us to only see this Actor in the Editor, and not in the actual game.
    @see SetActorHiddenInGame()
  **/
  public var bHidden : Bool;
  
  /**
    Allow each actor to run at a different time speed. The DeltaTime for a frame is multiplied by the global TimeDilation (in WorldSettings) and this CustomTimeDilation for this actor's tick.
  **/
  public var CustomTimeDilation : unreal.Float32;
  
  /**
    Primary Actor tick function, which calls TickActor().
    Tick functions can be configured to control whether ticking is enabled, at what time during a frame the update occurs, and to set up tick dependencies.
    @see https://docs.unrealengine.com/latest/INT/API/Runtime/Engine/Engine/FTickFunction/
    @see AddTickPrerequisiteActor(), AddTickPrerequisiteComponent()
  **/
  public var PrimaryActorTick : unreal.FActorTickFunction;
  
}
